# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `inherited_resources` gem.
# Please instead update this file by running `bin/tapioca gem inherited_resources`.


# source://inherited_resources//lib/inherited_resources/engine.rb#3
module InheritedResources
  # source://inherited_resources//lib/inherited_resources.rb#32
  def parent_controller; end

  # source://inherited_resources//lib/inherited_resources.rb#32
  def parent_controller=(val); end

  class << self
    # Change the flash keys used by FlashResponder.
    #
    # source://inherited_resources//lib/inherited_resources.rb#26
    def flash_keys=(array); end

    # source://inherited_resources//lib/inherited_resources.rb#32
    def parent_controller; end

    # source://inherited_resources//lib/inherited_resources.rb#32
    def parent_controller=(val); end
  end
end

# source://inherited_resources//lib/inherited_resources.rb#12
InheritedResources::ACTIONS = T.let(T.unsafe(nil), Array)

# Holds all default actions for InheritedResources.
#
# source://inherited_resources//lib/inherited_resources/actions.rb#5
module InheritedResources::Actions
  # POST /resources
  #
  # source://inherited_resources//lib/inherited_resources/actions.rb#32
  def create(options = T.unsafe(nil), &block); end

  # DELETE /resources/1
  #
  # source://inherited_resources//lib/inherited_resources/actions.rb#56
  def destroy(options = T.unsafe(nil), &block); end

  # GET /resources/1/edit
  #
  # source://inherited_resources//lib/inherited_resources/actions.rb#26
  def edit(options = T.unsafe(nil), &block); end

  # GET /resources
  #
  # source://inherited_resources//lib/inherited_resources/actions.rb#8
  def index(options = T.unsafe(nil), &block); end

  # GET /resources/new
  #
  # source://inherited_resources//lib/inherited_resources/actions.rb#20
  def new(options = T.unsafe(nil), &block); end

  # GET /resources/1
  #
  # source://inherited_resources//lib/inherited_resources/actions.rb#14
  def show(options = T.unsafe(nil), &block); end

  # PUT /resources/1
  #
  # source://inherited_resources//lib/inherited_resources/actions.rb#44
  def update(options = T.unsafe(nil), &block); end

  protected

  # POST /resources
  #
  # source://inherited_resources//lib/inherited_resources/actions.rb#41
  def create!(options = T.unsafe(nil), &block); end

  # DELETE /resources/1
  #
  # source://inherited_resources//lib/inherited_resources/actions.rb#63
  def destroy!(options = T.unsafe(nil), &block); end

  # GET /resources/1/edit
  #
  # source://inherited_resources//lib/inherited_resources/actions.rb#29
  def edit!(options = T.unsafe(nil), &block); end

  # GET /resources
  #
  # source://inherited_resources//lib/inherited_resources/actions.rb#11
  def index!(options = T.unsafe(nil), &block); end

  # GET /resources/new
  #
  # source://inherited_resources//lib/inherited_resources/actions.rb#23
  def new!(options = T.unsafe(nil), &block); end

  # GET /resources/1
  #
  # source://inherited_resources//lib/inherited_resources/actions.rb#17
  def show!(options = T.unsafe(nil), &block); end

  # PUT /resources/1
  #
  # source://inherited_resources//lib/inherited_resources/actions.rb#53
  def update!(options = T.unsafe(nil), &block); end
end

# Base helpers for InheritedResource work. Some methods here can be overwritten
# and you will need to do that to customize your controllers from time to time.
#
# source://inherited_resources//lib/inherited_resources/base_helpers.rb#10
module InheritedResources::BaseHelpers
  protected

  # Returns the association chain, with all parents (does not include the
  # current resource).
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#130
  def association_chain; end

  # This class allows you to set a instance variable to begin your
  # association chain. For example, usually your projects belongs to users
  # and that means that they belong to the current logged in user. So you
  # could do this:
  #
  #   def begin_of_association_chain
  #     @current_user
  #   end
  #
  # So every time we instantiate a project, we will do:
  #
  #   @current_user.projects.build(params[:project])
  #   @current_user.projects.find(params[:id])
  #
  # The variable set in begin_of_association_chain is not sent when building
  # urls, so this is never going to happen when calling resource_url:
  #
  #   project_url(@current_user, @project)
  #
  # If the user actually scopes the url, you should use belongs_to method
  # and declare that projects belong to user.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#116
  def begin_of_association_chain; end

  # This method is responsible for building the object on :new and :create
  # methods. If you overwrite it, don't forget to cache the result in an
  # instance variable.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#53
  def build_resource; end

  # This is how the collection is loaded.
  #
  # You might want to overwrite this method if you want to add pagination
  # for example. When you do that, don't forget to cache the result in an
  # instance_variable:
  #
  #   def collection
  #     @projects ||= end_of_association_chain.paginate(params[:page]).all
  #   end
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#24
  def collection; end

  # Responsible for saving the resource on :create method. Overwriting this
  # allow you to control the way resource is saved. Let's say you have a
  # PasswordsController who is responsible for finding an user by email and
  # sent password instructions for him. Instead of overwriting the entire
  # :create method, you could do something:
  #
  #   def create_resource(object)
  #     object.send_instructions_by_email
  #   end
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#67
  def create_resource(object); end

  # Handle the :destroy method for the resource. Overwrite it to call your
  # own method for destroying the resource, as:
  #
  #   def destroy_resource(object)
  #     object.cancel
  #   end
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#90
  def destroy_resource(object); end

  # Returns if the controller has a parent. When only base helpers are loaded,
  # it's always false and should not be overwritten.
  #
  # @return [Boolean]
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#123
  def parent?; end

  # This is how the resource is loaded.
  #
  # You might want to overwrite this method when you are using permalink.
  # When you do that, don't forget to cache the result in an
  # instance_variable:
  #
  #   def resource
  #     @project ||= end_of_association_chain.find_by_permalink!(params[:id])
  #   end
  #
  # You also might want to add the exclamation mark at the end of the method
  # because it will raise a 404 if nothing can be found. Otherwise it will
  # probably render a 500 error message.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#45
  def resource; end

  # Responsible for updating the resource in :update method. This allow you
  # to handle how the resource is going to be updated, let's say in a different
  # way than the usual :update:
  #
  #   def update_resource(object, attributes)
  #     object.reset_password!(attributes)
  #   end
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#79
  def update_resource(object, attributes); end

  private

  # Hook to apply scopes. By default returns only the target_object given.
  # It's extend by HasScopeHelpers.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#283
  def apply_scopes_if_available(target_object); end

  # getting role for mass-assignment
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#374
  def as_role; end

  # extract attributes from params
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#356
  def build_resource_params; end

  # This methods gets your begin_of_association_chain, join it with your
  # parents chain and returns the scoped association.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#174
  def end_of_association_chain; end

  # Get collection ivar based on the current resource controller.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#234
  def get_collection_ivar; end

  # Get resource ivar based on the current resource controller.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#218
  def get_resource_ivar; end

  # Returns the name of the method used for building the resource in cases
  # where we have a parent. This is overwritten in singleton scenarios.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#199
  def method_for_association_build; end

  # Returns the name of the method to be called, before returning the end
  # of the association chain. This is overwritten by singleton cases
  # where no method for association chain is called.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#207
  def method_for_association_chain; end

  # Returns the appropriated method to build the resource.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#192
  def method_for_build; end

  # Returns finder method for instantiate resource by params[:id]
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#212
  def method_for_find; end

  # Returns hash of sanitized params in a form like
  # `{:project => {:project_attribute => 'value'}}`
  #
  # This method makes use of `project_params` (or `smth_else_params`) which
  # is a default Rails controller method for strong parameters definition.
  #
  # `permitted_params` is usually fired by method :new, :create, :update
  # actions. Action :new usually has no parameters so strong parameters
  # `require` directive raises a +ActionController::ParameterMissing+
  # exception. `#permitted_params` rescues such exceptions in :new and
  # returns an empty hash of parameters (which is reasonable default).
  # If for any reasons you need something more specific, you can redefine
  # this method in a way previous `inherited_resources` versions did:
  #
  #    # Unnecessary redefinition
  #    def permitted_params
  #      params.permit(:project => [:project_attribute])
  #    end
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#343
  def permitted_params; end

  # Fast accessor to resource_collection_name
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#158
  def resource_collection_name; end

  # Fast accessor to resource_instance_name
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#164
  def resource_instance_name; end

  # memoize the extraction of attributes from params
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#316
  def resource_params; end

  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#320
  def resource_params_method_name; end

  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#168
  def resource_request_name; end

  # Used to allow to specify success and failure within just one block:
  #
  #   def create
  #     create! do |success, failure|
  #       failure.html { redirect_to root_url }
  #     end
  #   end
  #
  # It also calculates the response url in case a block without arity is
  # given and returns it. Otherwise returns nil.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#259
  def respond_with_dual_blocks(object, options, &block); end

  # checking if role given
  #
  # @return [Boolean]
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#369
  def role_given?; end

  # Set collection ivar based on the current resource controller.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#244
  def set_collection_ivar(collection); end

  # Set resource ivar based on the current resource controller.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#228
  def set_resource_ivar(resource); end

  # URL to redirect to when redirect implies collection url.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#304
  def smart_collection_url; end

  # URL to redirect to when redirect implies resource url.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#295
  def smart_resource_url; end

  # Symbols chain in base helpers return nothing. This is later overwritten
  # by belongs_to and can be complex in polymorphic cases.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#290
  def symbols_for_association_chain; end

  # Adds the given object to association chain.
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#152
  def with_chain(object); end

  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#382
  def without_protection; end

  # @return [Boolean]
  #
  # source://inherited_resources//lib/inherited_resources/base_helpers.rb#378
  def without_protection_given?; end
end

# = belongs_to
#
# Let's suppose that we have some tasks that belongs to projects. To specify
# this association in your controllers, just do:
#
#    class TasksController < InheritedResources::Base
#      belongs_to :project
#    end
#
# belongs_to accepts several options to be able to configure the association.
# For example, if you want urls like /projects/:project_title/tasks, you
# can customize how InheritedResources find your projects:
#
#    class TasksController < InheritedResources::Base
#      belongs_to :project, :finder => :find_by_title!, :param => :project_title
#    end
#
# It also accepts :route_name, :parent_class and :instance_name as options.
# Check the lib/inherited_resources/class_methods.rb for more.
#
# = nested_belongs_to
#
# Now, our Tasks get some Comments and you need to nest even deeper. Good
# practices says that you should never nest more than two resources, but sometimes
# you have to for security reasons. So this is an example of how you can do it:
#
#    class CommentsController < InheritedResources::Base
#      nested_belongs_to :project, :task
#    end
#
# If you need to configure any of these belongs to, you can nested them using blocks:
#
#    class CommentsController < InheritedResources::Base
#      belongs_to :project, :finder => :find_by_title!, :param => :project_title do
#        belongs_to :task
#      end
#    end
#
# Warning: calling several belongs_to is the same as nesting them:
#
#    class CommentsController < InheritedResources::Base
#      belongs_to :project
#      belongs_to :task
#    end
#
# In other words, the code above is the same as calling nested_belongs_to.
#
# source://inherited_resources//lib/inherited_resources/belongs_to_helpers.rb#52
module InheritedResources::BelongsToHelpers
  protected

  # source://inherited_resources//lib/inherited_resources/belongs_to_helpers.rb#62
  def parent; end

  # Parent is always true when belongs_to is called.
  #
  # @return [Boolean]
  #
  # source://inherited_resources//lib/inherited_resources/belongs_to_helpers.rb#58
  def parent?; end

  # source://inherited_resources//lib/inherited_resources/belongs_to_helpers.rb#66
  def parent_type; end

  private

  # Evaluate the parent given. This is used to nest parents in the
  # association chain.
  #
  # source://inherited_resources//lib/inherited_resources/belongs_to_helpers.rb#75
  def evaluate_parent(parent_symbol, parent_config, chain = T.unsafe(nil)); end

  # source://inherited_resources//lib/inherited_resources/belongs_to_helpers.rb#80
  def get_parent_ivar(instance_name); end

  # source://inherited_resources//lib/inherited_resources/belongs_to_helpers.rb#85
  def set_parent_instance(parent_config, chain); end

  # Maps parents_symbols to build association chain. In this case, it
  # simply return the parent_symbols, however on polymorphic belongs to,
  # it has some customization.
  #
  # source://inherited_resources//lib/inherited_resources/belongs_to_helpers.rb#109
  def symbols_for_association_chain; end
end

# An object from BlankSlate simply discards all messages sent to it.
#
# source://inherited_resources//lib/inherited_resources/blank_slate.rb#5
class InheritedResources::BlankSlate
  # source://inherited_resources//lib/inherited_resources/blank_slate.rb#10
  def method_missing(*args); end
end

# source://inherited_resources//lib/inherited_resources/class_methods.rb#4
module InheritedResources::ClassMethods
  protected

  # Defines which actions will be inherited from the inherited controller.
  # Syntax is borrowed from resource_controller.
  #
  #   actions :index, :show, :edit
  #   actions :all, :except => :index
  #
  # @raise [ArgumentError]
  #
  # source://inherited_resources//lib/inherited_resources/class_methods.rb#76
  def actions(*actions_to_keep); end

  # Defines that this controller belongs to another resource.
  #
  #   belongs_to :projects
  #
  # == Options
  #
  # * <tt>:parent_class</tt> - Allows you to specify what is the parent class.
  #
  #     belongs_to :project, :parent_class => AdminProject
  #
  # * <tt>:class_name</tt> - Also allows you to specify the parent class, but you should
  #                          give a string. Added for ActiveRecord belongs to compatibility.
  #
  # * <tt>:instance_name</tt> - The instance variable name. By default is the name of the association.
  #
  #     belongs_to :project, :instance_name => :my_project
  #
  # * <tt>:finder</tt> - Specifies which method should be called to instantiate the parent.
  #
  #     belongs_to :project, :finder => :find_by_title!
  #
  #   This will make your projects be instantiated as:
  #
  #     Project.find_by_title!(params[:project_id])
  #
  #   Instead of:
  #
  #     Project.find(params[:project_id])
  #
  # * <tt>:param</tt> - Allows you to specify params key to retrieve the id.
  #                     Default is :association_id, which in this case is :project_id.
  #
  # * <tt>:route_name</tt> - Allows you to specify what is the route name in your url
  #                          helper. By default is association name.
  #
  # * <tt>:collection_name</tt> - Tell how to retrieve the next collection. Let's
  #                               suppose you have Tasks which belongs to Projects
  #                               which belongs to companies. This will do somewhere
  #                               down the road:
  #
  #      @company.projects
  #
  #   But if you want to retrieve instead:
  #
  #      @company.admin_projects
  #
  #   You supply the collection name.
  #
  # * <tt>:polymorphic</tt> - Tell the association is polymorphic.
  #
  # * <tt>:singleton</tt> - Tell it's a singleton association.
  #
  # * <tt>:optional</tt> - Tell the association is optional (it's a special
  #                        type of polymorphic association)
  #
  # @raise [ArgumentError]
  #
  # source://inherited_resources//lib/inherited_resources/class_methods.rb#143
  def belongs_to(*symbols, &block); end

  # Defines custom restful actions by resource or collection basis.
  #
  #   custom_actions :resource => [:delete, :transit], :collection => :search
  #
  # == Options
  #
  # * <tt>:resource</tt> -  Allows you to specify resource actions.
  #     custom_actions :resource => :delete
  #                         This macro creates 'delete' method in controller and defines
  #                         delete_resource_{path,url} helpers. The body of generated 'delete'
  #                         method is same as 'show' method. So you can override it if need
  #
  # * <tt>:collection</tt> - Allows you to specify collection actions.
  #     custom_actions :collection => :search
  #                         This macro creates 'search' method in controller and defines
  #                         search_resources_{path,url} helpers. The body of generated 'search'
  #                         method is same as 'index' method. So you can override it if need
  #
  # source://inherited_resources//lib/inherited_resources/class_methods.rb#270
  def custom_actions(options); end

  # Used to overwrite the default assumptions InheritedResources do. Whenever
  # this method is called, it should be on the top of your controller, since
  # almost other methods depends on the values given to <<tt>>defaults</tt>.
  #
  # == Options
  #
  # * <tt>:resource_class</tt> - The resource class which by default is guessed
  #                              by the controller name. Defaults to Project in
  #                              ProjectsController.
  #
  # * <tt>:collection_name</tt> - The name of the collection instance variable which
  #                               is set on the index action. Defaults to :projects in
  #                               ProjectsController.
  #
  # * <tt>:instance_name</tt> - The name of the singular instance variable which
  #                             is set on all actions besides index action. Defaults to
  #                             :project in ProjectsController.
  #
  # * <tt>:route_collection_name</tt> - The name of the collection route. Defaults to :collection_name.
  #
  # * <tt>:route_instance_name</tt> - The name of the singular route. Defaults to :instance_name.
  #
  # * <tt>:route_prefix</tt> - The route prefix which is automatically set in namespaced
  #                            controllers. Default to :admin on Admin::ProjectsController.
  #
  # * <tt>:singleton</tt> - Tells if this controller is singleton or not.
  #
  # * <tt>:finder</tt> - Specifies which method should be called to instantiate the resource.
  #
  #     defaults :finder => :find_by_slug
  #
  # @raise [ArgumentError]
  #
  # source://inherited_resources//lib/inherited_resources/class_methods.rb#39
  def defaults(options); end

  # Defines that this controller belongs to another resource.
  #
  #   belongs_to :projects
  #
  # == Options
  #
  # * <tt>:parent_class</tt> - Allows you to specify what is the parent class.
  #
  #     belongs_to :project, :parent_class => AdminProject
  #
  # * <tt>:class_name</tt> - Also allows you to specify the parent class, but you should
  #                          give a string. Added for ActiveRecord belongs to compatibility.
  #
  # * <tt>:instance_name</tt> - The instance variable name. By default is the name of the association.
  #
  #     belongs_to :project, :instance_name => :my_project
  #
  # * <tt>:finder</tt> - Specifies which method should be called to instantiate the parent.
  #
  #     belongs_to :project, :finder => :find_by_title!
  #
  #   This will make your projects be instantiated as:
  #
  #     Project.find_by_title!(params[:project_id])
  #
  #   Instead of:
  #
  #     Project.find(params[:project_id])
  #
  # * <tt>:param</tt> - Allows you to specify params key to retrieve the id.
  #                     Default is :association_id, which in this case is :project_id.
  #
  # * <tt>:route_name</tt> - Allows you to specify what is the route name in your url
  #                          helper. By default is association name.
  #
  # * <tt>:collection_name</tt> - Tell how to retrieve the next collection. Let's
  #                               suppose you have Tasks which belongs to Projects
  #                               which belongs to companies. This will do somewhere
  #                               down the road:
  #
  #      @company.projects
  #
  #   But if you want to retrieve instead:
  #
  #      @company.admin_projects
  #
  #   You supply the collection name.
  #
  # * <tt>:polymorphic</tt> - Tell the association is polymorphic.
  #
  # * <tt>:singleton</tt> - Tell it's a singleton association.
  #
  # * <tt>:optional</tt> - Tell the association is optional (it's a special
  #                        type of polymorphic association)
  #
  # @raise [ArgumentError]
  #
  # source://inherited_resources//lib/inherited_resources/class_methods.rb#226
  def nested_belongs_to(*symbols, &block); end

  # A quick method to declare optional belongs to.
  #
  # source://inherited_resources//lib/inherited_resources/class_methods.rb#246
  def optional_belongs_to(*symbols, &block); end

  # A quick method to declare polymorphic belongs to.
  #
  # source://inherited_resources//lib/inherited_resources/class_methods.rb#230
  def polymorphic_belongs_to(*symbols, &block); end

  # A quick method to declare singleton belongs to.
  #
  # source://inherited_resources//lib/inherited_resources/class_methods.rb#238
  def singleton_belongs_to(*symbols, &block); end

  # Defines the role to use when creating or updating resource.
  # Makes sense when using rails 3.1 mass assignment conventions
  #
  # source://inherited_resources//lib/inherited_resources/class_methods.rb#288
  def with_role(role); end

  # source://inherited_resources//lib/inherited_resources/class_methods.rb#292
  def without_protection(flag); end

  private

  # source://inherited_resources//lib/inherited_resources/class_methods.rb#306
  def acts_as_polymorphic!; end

  # source://inherited_resources//lib/inherited_resources/class_methods.rb#313
  def acts_as_shallow!; end

  # source://inherited_resources//lib/inherited_resources/class_methods.rb#298
  def acts_as_singleton!; end

  # source://inherited_resources//lib/inherited_resources/class_methods.rb#397
  def create_custom_action(resource_or_collection, action); end

  # Hook called on inheritance.
  #
  # source://inherited_resources//lib/inherited_resources/class_methods.rb#409
  def inherited(base); end

  # Initialize resources class accessors and set their default values.
  #
  # source://inherited_resources//lib/inherited_resources/class_methods.rb#320
  def initialize_resources_class_accessors!; end
end

# Allows controllers to write actions using a class method DSL.
#
#   class MyController < InheritedResources::Base
#     create! do |success, failure|
#       success.html { render :text => "It works!" }
#     end
#   end
#
# source://inherited_resources//lib/inherited_resources/dsl.rb#12
module InheritedResources::DSL
  class << self
    # @private
    #
    # source://inherited_resources//lib/inherited_resources/dsl.rb#13
    def included(base); end
  end
end

# = polymorphic associations
#
# In some cases you have a resource that belongs to two different resources
# but not at the same time. For example, let's suppose you have File, Message
# and Task as resources and they are all commentable.
#
# Polymorphic associations allows you to create just one controller that will
# deal with each case.
#
#   class Comment < InheritedResources::Base
#     belongs_to :file, :message, :task, :polymorphic => true
#   end
#
# Your routes should be something like:
#
#   resources :files do
#     resources :comments #=> /files/13/comments
#   end
#   resources :tasks do
#     resources :comments #=> /tasks/17/comments
#   end
#   resources :messages do
#     resources :comments #=> /messages/11/comments
#   end
#
# When using polymorphic associations, you get some free helpers:
#
#   parent?         #=> true
#   parent_type     #=> :task
#   parent_class    #=> Task
#   parent          #=> @task
#
# This polymorphic controllers thing is a great idea by James Golick and he
# built it in resource_controller. Here is just a re-implementation.
#
# = optional polymorphic associations
#
# Let's take another break from ProjectsController. Let's suppose we are
# building a store, which sell products.
#
# On the website, we can show all products, but also products scoped to
# categories, brands, users. In this case case, the association is optional, and
# we deal with it in the following way:
#
#   class ProductsController < InheritedResources::Base
#     belongs_to :category, :brand, :user, :polymorphic => true, :optional => true
#   end
#
# This will handle all those urls properly:
#
#   /products/1
#   /categories/2/products/5
#   /brands/10/products/3
#   /user/13/products/11
#
# = nested polymorphic associations
#
# You can have polymorphic associations with nested resources. Let's suppose
# that our File, Task and Message resources in the previous example belongs to
# a project.
#
# This way we can have:
#
#   class CommentsController < InheritedResources::Base
#     belongs_to :project {
#       belongs_to :file, :message, :task, :polymorphic => true
#     }
#   end
#
# Or:
#
#   class CommentsController < InheritedResources::Base
#     nested_belongs_to :project
#     nested_belongs_to :file, :message, :task, :polymorphic => true
#   end
#
# Choose the syntax that makes more sense to you. :)
#
# Finally your routes should be something like:
#
#   resources :projects do
#     resources :files do
#       resources :comments #=> /projects/1/files/13/comments
#     end
#     resources :tasks do
#       resources :comments #=> /projects/1/tasks/17/comments
#     end
#     resources :messages do
#       resources :comments #=> /projects/1/messages/11/comments
#     end
#   end
#
# The helpers work in the same way as above.
#
# source://inherited_resources//lib/inherited_resources/polymorphic_helpers.rb#99
module InheritedResources::PolymorphicHelpers
  protected

  # Returns the parent object. They are also available with the instance
  # variable name: @task, @file, @note...
  #
  # source://inherited_resources//lib/inherited_resources/polymorphic_helpers.rb#123
  def parent; end

  # If the polymorphic association is optional, we might not have a parent.
  #
  # @return [Boolean]
  #
  # source://inherited_resources//lib/inherited_resources/polymorphic_helpers.rb#132
  def parent?; end

  # source://inherited_resources//lib/inherited_resources/polymorphic_helpers.rb#116
  def parent_class; end

  # Returns the parent type. A Comments class can have :task, :file, :note
  # as parent types.
  #
  # source://inherited_resources//lib/inherited_resources/polymorphic_helpers.rb#106
  def parent_type; end

  private

  # Maps parents_symbols to build association chain.
  #
  # If the parents_symbols find :polymorphic, it goes through the
  # params keys to see which polymorphic parent matches the given params.
  #
  # When optional is given, it does not raise errors if the polymorphic
  # params are missing.
  #
  # source://inherited_resources//lib/inherited_resources/polymorphic_helpers.rb#150
  def symbols_for_association_chain; end
end

# source://inherited_resources//lib/inherited_resources/engine.rb#4
class InheritedResources::Railtie < ::Rails::Engine; end

# source://inherited_resources//lib/inherited_resources/responder.rb#4
class InheritedResources::Responder < ::ActionController::Responder
  include ::Responders::FlashResponder

  class << self
    private

    # source://inherited_resources//lib/inherited_resources/responder.rb#7
    def __class_attr_error_status; end

    # source://inherited_resources//lib/inherited_resources/responder.rb#7
    def __class_attr_error_status=(new_value); end

    # source://inherited_resources//lib/inherited_resources/responder.rb#8
    def __class_attr_redirect_status; end

    # source://inherited_resources//lib/inherited_resources/responder.rb#8
    def __class_attr_redirect_status=(new_value); end
  end
end

# Shallow provides a functionality that goes on pair with Rails' shallow.
# It is very similar to "optional" but it actually finds all the parents
# resources instead of leaving them blank. Consider the following example:
#
#   belongs_to :post, :shallow => true do
#     belongs_to :comment
#   end
#
# When accessed as /comments/1, Inherited Resources will automatically get
# the post resource so both objects are actually accessible through the views.
#
# However, when using optional, Inherited Resources wouldn't actually bother
# with finding the parent object.
#
# source://inherited_resources//lib/inherited_resources/shallow_helpers.rb#17
module InheritedResources::ShallowHelpers
  private

  # source://inherited_resources//lib/inherited_resources/shallow_helpers.rb#37
  def load_parents(instance, parent_symbols); end

  # source://inherited_resources//lib/inherited_resources/shallow_helpers.rb#20
  def symbols_for_association_chain; end
end

# = singleton
#
# Singletons are usually used in associations which are related through has_one
# and belongs_to. You declare those associations like this:
#
#   class ManagersController < InheritedResources::Base
#     belongs_to :project, :singleton => true
#   end
#
# But in some cases, like an AccountsController, you have a singleton object
# that is not necessarily associated with another:
#
#   class AccountsController < InheritedResources::Base
#     defaults :singleton => true
#   end
#
# Besides that, you should overwrite the methods :resource and :build_resource
# to make it work properly:
#
#   class AccountsController < InheritedResources::Base
#     defaults :singleton => true
#
#     protected
#       def resource
#         @current_user.account
#       end
#
#       def build_resource(attributes = {})
#         Account.new(attributes)
#       end
#   end
#
# When you have a singleton controller, the action index is removed.
#
# source://inherited_resources//lib/inherited_resources/singleton_helpers.rb#39
module InheritedResources::SingletonHelpers
  protected

  # Singleton methods does not deal with collections.
  #
  # source://inherited_resources//lib/inherited_resources/singleton_helpers.rb#45
  def collection; end

  # Overwrites how singleton deals with resource.
  #
  # If you are going to overwrite it, you should notice that the
  # end_of_association_chain here is not the same as in default belongs_to.
  #
  #   class TasksController < InheritedResources::Base
  #     belongs_to :project
  #   end
  #
  # In this case, the association chain would be:
  #
  #   Project.find(params[:project_id]).tasks
  #
  # So you would just have to call find(:all) at the end of association
  # chain. And this is what happened.
  #
  # In singleton controllers:
  #
  #   class ManagersController < InheritedResources::Base
  #     belongs_to :project, :singleton => true
  #   end
  #
  # The association chain will be:
  #
  #   Project.find(params[:project_id])
  #
  # So we have to call manager on it, not find.
  #
  # source://inherited_resources//lib/inherited_resources/singleton_helpers.rb#77
  def resource; end

  private

  # Returns the appropriated method to build the resource.
  #
  # source://inherited_resources//lib/inherited_resources/singleton_helpers.rb#85
  def method_for_association_build; end

  # Sets the method_for_association_chain to nil. See <tt>resource</tt>
  # above for more information.
  #
  # source://inherited_resources//lib/inherited_resources/singleton_helpers.rb#92
  def method_for_association_chain; end
end

# = URLHelpers
#
# When you use InheritedResources it creates some UrlHelpers for you.
# And they handle everything for you.
#
#  # /posts/1/comments
#  resource_url          # => /posts/1/comments/#{@comment.to_param}
#  resource_url(comment) # => /posts/1/comments/#{comment.to_param}
#  new_resource_url      # => /posts/1/comments/new
#  edit_resource_url     # => /posts/1/comments/#{@comment.to_param}/edit
#  collection_url        # => /posts/1/comments
#  parent_url            # => /posts/1
#
#  # /projects/1/tasks
#  resource_url          # => /projects/1/tasks/#{@task.to_param}
#  resource_url(task)    # => /projects/1/tasks/#{task.to_param}
#  new_resource_url      # => /projects/1/tasks/new
#  edit_resource_url     # => /projects/1/tasks/#{@task.to_param}/edit
#  collection_url        # => /projects/1/tasks
#  parent_url            # => /projects/1
#
#  # /users
#  resource_url          # => /users/#{@user.to_param}
#  resource_url(user)    # => /users/#{user.to_param}
#  new_resource_url      # => /users/new
#  edit_resource_url     # => /users/#{@user.to_param}/edit
#  collection_url        # => /users
#  parent_url            # => /
#
# The nice thing is that those urls are not guessed during runtime. They are
# all created when you inherit.
#
# source://inherited_resources//lib/inherited_resources/url_helpers.rb#36
module InheritedResources::UrlHelpers
  protected

  # This method hard code url helpers in the class.
  #
  # We are doing this because is cheaper than guessing them when our action
  # is being processed (and even more cheaper when we are using nested
  # resources).
  #
  # When we are using polymorphic associations, those helpers rely on
  # polymorphic_url Rails helper.
  #
  # source://inherited_resources//lib/inherited_resources/url_helpers.rb#48
  def create_resources_url_helpers!; end

  # source://inherited_resources//lib/inherited_resources/url_helpers.rb#230
  def define_helper_method(prefix, name, suffix, segments); end

  # source://inherited_resources//lib/inherited_resources/url_helpers.rb#196
  def define_params_helper(prefix, name, singleton, polymorphic, parent_index, ivars); end

  # source://inherited_resources//lib/inherited_resources/url_helpers.rb#171
  def generate_url_and_path_helpers(prefix, name, resource_segments, resource_ivars); end

  # source://inherited_resources//lib/inherited_resources/url_helpers.rb#143
  def handle_shallow_resource(prefix, name, segments, ivars); end
end

# source://inherited_resources//lib/inherited_resources/version.rb#3
InheritedResources::VERSION = T.let(T.unsafe(nil), String)
