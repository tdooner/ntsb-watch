# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `kamal` gem.
# Please instead update this file by running `bin/tapioca gem kamal`.


# SSHKit uses instance eval, so we need a global const for ergonomics
#
# source://kamal//lib/kamal/cli.rb#9
KAMAL = T.let(T.unsafe(nil), Kamal::Commander)

# source://kamal//lib/kamal.rb#1
module Kamal; end

# source://kamal//lib/kamal/cli.rb#1
module Kamal::Cli; end

# source://kamal//lib/kamal/cli/accessory.rb#4
class Kamal::Cli::Accessory < ::Kamal::Cli::Base
  # source://kamal//lib/kamal/cli/accessory.rb#6
  def boot(name, prepare: T.unsafe(nil)); end

  # source://kamal//lib/kamal/cli/accessory.rb#129
  def details(name); end

  # source://kamal//lib/kamal/cli/accessory.rb#61
  def directories(name); end

  # source://kamal//lib/kamal/cli/accessory.rb#143
  def exec(name, *cmd); end

  # source://kamal//lib/kamal/cli/main.rb#227
  def help(command = T.unsafe(nil), subcommand = T.unsafe(nil)); end

  # source://kamal//lib/kamal/cli/accessory.rb#183
  def logs(name); end

  # source://kamal//lib/kamal/cli/accessory.rb#74
  def reboot(name); end

  # source://kamal//lib/kamal/cli/accessory.rb#208
  def remove(name); end

  # source://kamal//lib/kamal/cli/accessory.rb#221
  def remove_container(name); end

  # source://kamal//lib/kamal/cli/accessory.rb#233
  def remove_image(name); end

  # source://kamal//lib/kamal/cli/accessory.rb#245
  def remove_service_directory(name); end

  # source://kamal//lib/kamal/cli/accessory.rb#121
  def restart(name); end

  # source://kamal//lib/kamal/cli/accessory.rb#88
  def start(name); end

  # source://kamal//lib/kamal/cli/accessory.rb#104
  def stop(name); end

  # source://kamal//lib/kamal/cli/accessory.rb#258
  def upgrade(name); end

  # source://kamal//lib/kamal/cli/accessory.rb#44
  def upload(name); end

  private

  # source://kamal//lib/kamal/cli/accessory.rb#292
  def accessory_hosts(accessory); end

  # source://kamal//lib/kamal/cli/accessory.rb#284
  def error_on_missing_accessory(name); end

  # source://kamal//lib/kamal/cli/accessory.rb#303
  def prepare(name); end

  # source://kamal//lib/kamal/cli/accessory.rb#296
  def remove_accessory(name); end

  # source://kamal//lib/kamal/cli/accessory.rb#275
  def with_accessory(name); end
end

# source://kamal//lib/kamal.rb#14
module Kamal::Cli::Alias; end

# source://kamal//lib/kamal/cli/alias/command.rb#1
class Kamal::Cli::Alias::Command < ::Thor::DynamicCommand
  # source://kamal//lib/kamal/cli/alias/command.rb#2
  def run(instance, args = T.unsafe(nil)); end
end

# source://kamal//lib/kamal/cli/app.rb#1
class Kamal::Cli::App < ::Kamal::Cli::Base
  # source://kamal//lib/kamal/cli/app.rb#3
  def boot; end

  # source://kamal//lib/kamal/cli/app.rb#175
  def containers; end

  # source://kamal//lib/kamal/cli/app.rb#94
  def details; end

  # source://kamal//lib/kamal/cli/app.rb#109
  def exec(*cmd); end

  # source://kamal//lib/kamal/cli/main.rb#230
  def help(command = T.unsafe(nil), subcommand = T.unsafe(nil)); end

  # source://kamal//lib/kamal/cli/app.rb#207
  def images; end

  # source://kamal//lib/kamal/cli/app.rb#269
  def live; end

  # source://kamal//lib/kamal/cli/app.rb#219
  def logs; end

  # source://kamal//lib/kamal/cli/app.rb#284
  def maintenance; end

  # source://kamal//lib/kamal/cli/app.rb#259
  def remove; end

  # source://kamal//lib/kamal/cli/app.rb#337
  def remove_app_directories; end

  # source://kamal//lib/kamal/cli/app.rb#299
  def remove_container(version); end

  # source://kamal//lib/kamal/cli/app.rb#313
  def remove_containers; end

  # source://kamal//lib/kamal/cli/app.rb#327
  def remove_images; end

  # source://kamal//lib/kamal/cli/app.rb#181
  def stale_containers; end

  # source://kamal//lib/kamal/cli/app.rb#46
  def start; end

  # source://kamal//lib/kamal/cli/app.rb#69
  def stop; end

  # source://kamal//lib/kamal/cli/app.rb#354
  def version; end

  private

  # source://kamal//lib/kamal/cli/app.rb#376
  def current_running_version(host: T.unsafe(nil)); end

  # source://kamal//lib/kamal/cli/app.rb#397
  def host_boot_groups; end

  # source://kamal//lib/kamal/cli/app.rb#362
  def using_version(new_version); end

  # source://kamal//lib/kamal/cli/app.rb#385
  def version_or_latest; end

  # source://kamal//lib/kamal/cli/app.rb#389
  def with_lock_if_stopping; end
end

# source://kamal//lib/kamal/cli/app/assets.rb#1
class Kamal::Cli::App::Assets
  # @return [Assets] a new instance of Assets
  #
  # source://kamal//lib/kamal/cli/app/assets.rb#6
  def initialize(host, role, sshkit); end

  # source://kamal//lib/kamal/cli/app/assets.rb#4
  def assets?(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/cli/app/assets.rb#3
  def capture_with_info(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/cli/app/assets.rb#3
  def execute(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute host.
  #
  # source://kamal//lib/kamal/cli/app/assets.rb#2
  def host; end

  # source://kamal//lib/kamal/cli/app/assets.rb#3
  def info(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute role.
  #
  # source://kamal//lib/kamal/cli/app/assets.rb#2
  def role; end

  # source://kamal//lib/kamal/cli/app/assets.rb#12
  def run; end

  # Returns the value of attribute sshkit.
  #
  # source://kamal//lib/kamal/cli/app/assets.rb#2
  def sshkit; end

  private

  # source://kamal//lib/kamal/cli/app/assets.rb#21
  def app; end
end

# source://kamal//lib/kamal/cli/app/boot.rb#1
class Kamal::Cli::App::Boot
  # @return [Boot] a new instance of Boot
  #
  # source://kamal//lib/kamal/cli/app/boot.rb#6
  def initialize(host, role, sshkit, version, barrier); end

  # source://kamal//lib/kamal/cli/app/boot.rb#4
  def assets?(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute barrier.
  #
  # source://kamal//lib/kamal/cli/app/boot.rb#2
  def barrier; end

  # source://kamal//lib/kamal/cli/app/boot.rb#3
  def capture_with_info(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/cli/app/boot.rb#3
  def capture_with_pretty_json(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/cli/app/boot.rb#3
  def error(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/cli/app/boot.rb#3
  def execute(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute host.
  #
  # source://kamal//lib/kamal/cli/app/boot.rb#2
  def host; end

  # source://kamal//lib/kamal/cli/app/boot.rb#3
  def info(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute role.
  #
  # source://kamal//lib/kamal/cli/app/boot.rb#2
  def role; end

  # source://kamal//lib/kamal/cli/app/boot.rb#14
  def run; end

  # source://kamal//lib/kamal/cli/app/boot.rb#4
  def running_proxy?(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute sshkit.
  #
  # source://kamal//lib/kamal/cli/app/boot.rb#2
  def sshkit; end

  # source://kamal//lib/kamal/cli/app/boot.rb#3
  def upload!(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute version.
  #
  # source://kamal//lib/kamal/cli/app/boot.rb#2
  def version; end

  private

  # source://kamal//lib/kamal/cli/app/boot.rb#107
  def app; end

  # source://kamal//lib/kamal/cli/app/boot.rb#115
  def audit(message); end

  # source://kamal//lib/kamal/cli/app/boot.rb#111
  def auditor; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/cli/app/boot.rb#103
  def barrier_role?; end

  # source://kamal//lib/kamal/cli/app/boot.rb#91
  def close_barrier; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/cli/app/boot.rb#119
  def gatekeeper?; end

  # source://kamal//lib/kamal/cli/app/boot.rb#35
  def old_version_renamed_if_clashing; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/cli/app/boot.rb#123
  def queuer?; end

  # source://kamal//lib/kamal/cli/app/boot.rb#76
  def release_barrier; end

  # source://kamal//lib/kamal/cli/app/boot.rb#46
  def start_new_version; end

  # source://kamal//lib/kamal/cli/app/boot.rb#66
  def stop_new_version; end

  # source://kamal//lib/kamal/cli/app/boot.rb#70
  def stop_old_version(version); end

  # source://kamal//lib/kamal/cli/app/boot.rb#82
  def wait_at_barrier; end
end

# source://kamal//lib/kamal/cli/app/error_pages.rb#1
class Kamal::Cli::App::ErrorPages
  # @return [ErrorPages] a new instance of ErrorPages
  #
  # source://kamal//lib/kamal/cli/app/error_pages.rb#7
  def initialize(host, sshkit); end

  # source://kamal//lib/kamal/cli/app/error_pages.rb#5
  def execute(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute host.
  #
  # source://kamal//lib/kamal/cli/app/error_pages.rb#4
  def host; end

  # source://kamal//lib/kamal/cli/app/error_pages.rb#12
  def run; end

  # Returns the value of attribute sshkit.
  #
  # source://kamal//lib/kamal/cli/app/error_pages.rb#4
  def sshkit; end

  # source://kamal//lib/kamal/cli/app/error_pages.rb#5
  def upload!(*_arg0, **_arg1, &_arg2); end

  private

  # source://kamal//lib/kamal/cli/app/error_pages.rb#22
  def with_error_pages_tmpdir; end
end

# source://kamal//lib/kamal/cli/app/error_pages.rb#2
Kamal::Cli::App::ErrorPages::ERROR_PAGES_GLOB = T.let(T.unsafe(nil), String)

# source://kamal//lib/kamal/cli/app/ssl_certificates.rb#1
class Kamal::Cli::App::SslCertificates
  # @return [SslCertificates] a new instance of SslCertificates
  #
  # source://kamal//lib/kamal/cli/app/ssl_certificates.rb#5
  def initialize(host, role, sshkit); end

  # source://kamal//lib/kamal/cli/app/ssl_certificates.rb#3
  def execute(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute host.
  #
  # source://kamal//lib/kamal/cli/app/ssl_certificates.rb#2
  def host; end

  # source://kamal//lib/kamal/cli/app/ssl_certificates.rb#3
  def info(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute role.
  #
  # source://kamal//lib/kamal/cli/app/ssl_certificates.rb#2
  def role; end

  # source://kamal//lib/kamal/cli/app/ssl_certificates.rb#11
  def run; end

  # Returns the value of attribute sshkit.
  #
  # source://kamal//lib/kamal/cli/app/ssl_certificates.rb#2
  def sshkit; end

  # source://kamal//lib/kamal/cli/app/ssl_certificates.rb#3
  def upload!(*_arg0, **_arg1, &_arg2); end

  private

  # source://kamal//lib/kamal/cli/app/ssl_certificates.rb#25
  def app; end
end

# source://kamal//lib/kamal/cli/base.rb#5
class Kamal::Cli::Base < ::Thor
  include ::SSHKit::DSL

  # @return [Base] a new instance of Base
  #
  # source://kamal//lib/kamal/cli/base.rb#25
  def initialize(args = T.unsafe(nil), local_options = T.unsafe(nil), config = T.unsafe(nil)); end

  private

  # source://kamal//lib/kamal/cli/base.rb#104
  def acquire_lock; end

  # source://kamal//lib/kamal/cli/base.rb#168
  def command; end

  # source://kamal//lib/kamal/cli/base.rb#94
  def confirming(question); end

  # source://kamal//lib/kamal/cli/base.rb#209
  def ensure_docker_installed; end

  # source://kamal//lib/kamal/cli/base.rb#194
  def ensure_run_directory; end

  # source://kamal//lib/kamal/cli/base.rb#186
  def first_invocation; end

  # source://kamal//lib/kamal/cli/base.rb#42
  def initialize_commander; end

  # source://kamal//lib/kamal/cli/base.rb#155
  def on(*args, &block); end

  # source://kamal//lib/kamal/cli/base.rb#38
  def options_with_subcommand_class_options; end

  # source://kamal//lib/kamal/cli/base.rb#161
  def pre_connect_if_required; end

  # source://kamal//lib/kamal/cli/base.rb#64
  def print_runtime; end

  # source://kamal//lib/kamal/cli/base.rb#122
  def raise_if_locked; end

  # source://kamal//lib/kamal/cli/base.rb#115
  def release_lock; end

  # source://kamal//lib/kamal/cli/base.rb#190
  def reset_invocation(cli_class); end

  # source://kamal//lib/kamal/cli/base.rb#134
  def run_hook(hook, **extra_details); end

  # source://kamal//lib/kamal/cli/base.rb#179
  def subcommand; end

  # source://kamal//lib/kamal/cli/base.rb#200
  def with_env(env); end

  # source://kamal//lib/kamal/cli/base.rb#73
  def with_lock; end

  class << self
    # source://kamal//lib/kamal/cli/base.rb#9
    def dynamic_command_class; end

    # @return [Boolean]
    #
    # source://kamal//lib/kamal/cli/base.rb#8
    def exit_on_failure?; end
  end
end

# source://kamal//lib/kamal/cli.rb#2
class Kamal::Cli::BootError < ::StandardError; end

# source://kamal//lib/kamal/cli/build.rb#3
class Kamal::Cli::Build < ::Kamal::Cli::Base
  # source://kamal//lib/kamal/cli/build.rb#84
  def create; end

  # source://kamal//lib/kamal/cli/build.rb#7
  def deliver; end

  # source://kamal//lib/kamal/cli/build.rb#113
  def details; end

  # source://kamal//lib/kamal/cli/build.rb#122
  def dev; end

  # source://kamal//lib/kamal/cli/main.rb#233
  def help(command = T.unsafe(nil), subcommand = T.unsafe(nil)); end

  # source://kamal//lib/kamal/cli/build.rb#69
  def pull; end

  # source://kamal//lib/kamal/cli/build.rb#14
  def push; end

  # source://kamal//lib/kamal/cli/build.rb#105
  def remove; end

  private

  # source://kamal//lib/kamal/cli/build.rb#156
  def connect_to_remote_host(remote_host); end

  # source://kamal//lib/kamal/cli/build.rb#193
  def login_to_registry_locally; end

  # source://kamal//lib/kamal/cli/build.rb#199
  def login_to_registry_remotely; end

  # source://kamal//lib/kamal/cli/build.rb#169
  def mirror_hosts; end

  # source://kamal//lib/kamal/cli/build.rb#184
  def pull_on_hosts(hosts); end
end

# source://kamal//lib/kamal/cli/build.rb#4
class Kamal::Cli::Build::BuildError < ::StandardError; end

# source://kamal//lib/kamal/cli/build/clone.rb#3
class Kamal::Cli::Build::Clone
  # @return [Clone] a new instance of Clone
  #
  # source://kamal//lib/kamal/cli/build/clone.rb#7
  def initialize(sshkit); end

  # source://kamal//lib/kamal/cli/build/clone.rb#5
  def capture_with_info(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/cli/build/clone.rb#5
  def error(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/cli/build/clone.rb#5
  def execute(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/cli/build/clone.rb#5
  def info(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/cli/build/clone.rb#11
  def prepare; end

  # Returns the value of attribute sshkit.
  #
  # source://kamal//lib/kamal/cli/build/clone.rb#4
  def sshkit; end

  private

  # source://kamal//lib/kamal/cli/build/clone.rb#32
  def clone_repo; end

  # source://kamal//lib/kamal/cli/build/clone.rb#39
  def reset; end

  # source://kamal//lib/kamal/cli/build/clone.rb#47
  def validate!; end
end

# source://kamal//lib/kamal/cli.rb#5
class Kamal::Cli::DependencyError < ::StandardError; end

# source://kamal//lib/kamal.rb#14
module Kamal::Cli::Healthcheck; end

# source://kamal//lib/kamal/cli/healthcheck/barrier.rb#3
class Kamal::Cli::Healthcheck::Barrier
  # @return [Barrier] a new instance of Barrier
  #
  # source://kamal//lib/kamal/cli/healthcheck/barrier.rb#4
  def initialize; end

  # source://kamal//lib/kamal/cli/healthcheck/barrier.rb#8
  def close; end

  # source://kamal//lib/kamal/cli/healthcheck/barrier.rb#12
  def open; end

  # source://kamal//lib/kamal/cli/healthcheck/barrier.rb#16
  def wait; end

  private

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/cli/healthcheck/barrier.rb#23
  def opened?; end

  # source://kamal//lib/kamal/cli/healthcheck/barrier.rb#27
  def set(value); end
end

# source://kamal//lib/kamal/cli/healthcheck/error.rb#1
class Kamal::Cli::Healthcheck::Error < ::StandardError; end

# source://kamal//lib/kamal/cli/healthcheck/poller.rb#1
module Kamal::Cli::Healthcheck::Poller
  extend ::Kamal::Cli::Healthcheck::Poller

  # source://kamal//lib/kamal/cli/healthcheck/poller.rb#4
  def wait_for_healthy(role, &block); end

  private

  # source://kamal//lib/kamal/cli/healthcheck/poller.rb#39
  def info(message); end
end

# source://kamal//lib/kamal/cli.rb#3
class Kamal::Cli::HookError < ::StandardError; end

# source://kamal//lib/kamal/cli/lock.rb#1
class Kamal::Cli::Lock < ::Kamal::Cli::Base
  # source://kamal//lib/kamal/cli/lock.rb#13
  def acquire; end

  # source://kamal//lib/kamal/cli/main.rb#236
  def help(command = T.unsafe(nil), subcommand = T.unsafe(nil)); end

  # source://kamal//lib/kamal/cli/lock.rb#26
  def release; end

  # source://kamal//lib/kamal/cli/lock.rb#3
  def status; end

  private

  # source://kamal//lib/kamal/cli/lock.rb#36
  def handle_missing_lock; end
end

# source://kamal//lib/kamal/cli.rb#4
class Kamal::Cli::LockError < ::StandardError; end

# source://kamal//lib/kamal/cli/main.rb#1
class Kamal::Cli::Main < ::Kamal::Cli::Base
  # source://kamal//lib/kamal/cli/main.rb#227
  def accessory(*args); end

  # source://kamal//lib/kamal/cli/main.rb#230
  def app(*args); end

  # source://kamal//lib/kamal/cli/main.rb#111
  def audit; end

  # source://kamal//lib/kamal/cli/main.rb#233
  def build(*args); end

  # source://kamal//lib/kamal/cli/main.rb#118
  def config; end

  # source://kamal//lib/kamal/cli/main.rb#19
  def deploy(boot_accessories: T.unsafe(nil)); end

  # source://kamal//lib/kamal/cli/main.rb#104
  def details; end

  # source://kamal//lib/kamal/cli/main.rb#125
  def docs(section = T.unsafe(nil)); end

  # source://kamal//lib/kamal/cli/main.rb#138
  def init; end

  # source://kamal//lib/kamal/cli/main.rb#236
  def lock(*args); end

  # source://kamal//lib/kamal/cli/main.rb#239
  def proxy(*args); end

  # source://kamal//lib/kamal/cli/main.rb#242
  def prune(*args); end

  # source://kamal//lib/kamal/cli/main.rb#54
  def redeploy; end

  # source://kamal//lib/kamal/cli/main.rb#245
  def registry(*args); end

  # source://kamal//lib/kamal/cli/main.rb#179
  def remove; end

  # source://kamal//lib/kamal/cli/main.rb#80
  def rollback(version); end

  # source://kamal//lib/kamal/cli/main.rb#248
  def secrets(*args); end

  # source://kamal//lib/kamal/cli/main.rb#251
  def server(*args); end

  # source://kamal//lib/kamal/cli/main.rb#4
  def setup; end

  # source://kamal//lib/kamal/cli/main.rb#193
  def upgrade; end

  # source://kamal//lib/kamal/cli/main.rb#222
  def version; end

  private

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/cli/main.rb#254
  def container_available?(version); end

  # source://kamal//lib/kamal/cli/main.rb#274
  def deploy_options; end
end

# source://kamal//lib/kamal/cli/proxy.rb#1
class Kamal::Cli::Proxy < ::Kamal::Cli::Base
  # source://kamal//lib/kamal/cli/proxy.rb#3
  def boot; end

  # source://kamal//lib/kamal/cli/proxy.rb#37
  def boot_config(subcommand); end

  # source://kamal//lib/kamal/cli/proxy.rb#199
  def details; end

  # source://kamal//lib/kamal/cli/main.rb#239
  def help(command = T.unsafe(nil), subcommand = T.unsafe(nil)); end

  # source://kamal//lib/kamal/cli/proxy.rb#209
  def logs; end

  # source://kamal//lib/kamal/cli/proxy.rb#106
  def reboot; end

  # source://kamal//lib/kamal/cli/proxy.rb#231
  def remove; end

  # source://kamal//lib/kamal/cli/proxy.rb#243
  def remove_container; end

  # source://kamal//lib/kamal/cli/proxy.rb#253
  def remove_image; end

  # source://kamal//lib/kamal/cli/proxy.rb#263
  def remove_proxy_directory; end

  # source://kamal//lib/kamal/cli/proxy.rb#191
  def restart; end

  # source://kamal//lib/kamal/cli/proxy.rb#171
  def start; end

  # source://kamal//lib/kamal/cli/proxy.rb#181
  def stop; end

  # source://kamal//lib/kamal/cli/proxy.rb#133
  def upgrade; end

  private

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/cli/proxy.rb#272
  def removal_allowed?(force); end
end

# source://kamal//lib/kamal/cli/prune.rb#1
class Kamal::Cli::Prune < ::Kamal::Cli::Base
  # source://kamal//lib/kamal/cli/prune.rb#3
  def all; end

  # source://kamal//lib/kamal/cli/prune.rb#23
  def containers; end

  # source://kamal//lib/kamal/cli/main.rb#242
  def help(command = T.unsafe(nil), subcommand = T.unsafe(nil)); end

  # source://kamal//lib/kamal/cli/prune.rb#11
  def images; end
end

# source://kamal//lib/kamal/cli/registry.rb#1
class Kamal::Cli::Registry < ::Kamal::Cli::Base
  # source://kamal//lib/kamal/cli/main.rb#245
  def help(command = T.unsafe(nil), subcommand = T.unsafe(nil)); end

  # source://kamal//lib/kamal/cli/registry.rb#5
  def login; end

  # source://kamal//lib/kamal/cli/registry.rb#15
  def logout; end
end

# source://kamal//lib/kamal/cli/secrets.rb#1
class Kamal::Cli::Secrets < ::Kamal::Cli::Base
  # source://kamal//lib/kamal/cli/secrets.rb#21
  def extract(name, secrets); end

  # source://kamal//lib/kamal/cli/secrets.rb#7
  def fetch(*secrets); end

  # source://kamal//lib/kamal/cli/main.rb#248
  def help(command = T.unsafe(nil), subcommand = T.unsafe(nil)); end

  # source://kamal//lib/kamal/cli/secrets.rb#31
  def print; end

  private

  # source://kamal//lib/kamal/cli/secrets.rb#38
  def initialize_adapter(adapter); end

  # source://kamal//lib/kamal/cli/secrets.rb#42
  def return_or_puts(value, inline: T.unsafe(nil)); end
end

# source://kamal//lib/kamal/cli/server.rb#1
class Kamal::Cli::Server < ::Kamal::Cli::Base
  # source://kamal//lib/kamal/cli/server.rb#28
  def bootstrap; end

  # source://kamal//lib/kamal/cli/server.rb#4
  def exec(*cmd); end

  # source://kamal//lib/kamal/cli/main.rb#251
  def help(command = T.unsafe(nil), subcommand = T.unsafe(nil)); end
end

# source://kamal//lib/kamal/commander.rb#5
class Kamal::Commander
  # @return [Commander] a new instance of Commander
  #
  # source://kamal//lib/kamal/commander.rb#10
  def initialize; end

  # source://kamal//lib/kamal/commander.rb#88
  def accessory(name); end

  # source://kamal//lib/kamal/commander.rb#8
  def accessory_hosts(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commander.rb#80
  def accessory_names; end

  # source://kamal//lib/kamal/commander.rb#128
  def alias(name); end

  # source://kamal//lib/kamal/commander.rb#84
  def app(role: T.unsafe(nil), host: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commander.rb#8
  def app_hosts(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commander.rb#92
  def auditor(**details); end

  # source://kamal//lib/kamal/commander.rb#96
  def builder; end

  # source://kamal//lib/kamal/commander.rb#23
  def config; end

  # source://kamal//lib/kamal/commander.rb#30
  def configure(**kwargs); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/commander.rb#34
  def configured?; end

  # Returns the value of attribute connected.
  #
  # source://kamal//lib/kamal/commander.rb#6
  def connected; end

  # Sets the attribute connected
  #
  # @param value the value to set the attribute connected to.
  #
  # source://kamal//lib/kamal/commander.rb#6
  def connected=(_arg0); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/commander.rb#148
  def connected?; end

  # source://kamal//lib/kamal/commander.rb#100
  def docker; end

  # Returns the value of attribute holding_lock.
  #
  # source://kamal//lib/kamal/commander.rb#6
  def holding_lock; end

  # Sets the attribute holding_lock
  #
  # @param value the value to set the attribute holding_lock to.
  #
  # source://kamal//lib/kamal/commander.rb#6
  def holding_lock=(_arg0); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/commander.rb#144
  def holding_lock?; end

  # source://kamal//lib/kamal/commander.rb#104
  def hook; end

  # source://kamal//lib/kamal/commander.rb#8
  def hosts(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commander.rb#108
  def lock; end

  # source://kamal//lib/kamal/commander.rb#8
  def primary_host(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commander.rb#8
  def primary_role(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commander.rb#112
  def proxy; end

  # source://kamal//lib/kamal/commander.rb#8
  def proxy_hosts(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commander.rb#116
  def prune; end

  # source://kamal//lib/kamal/commander.rb#120
  def registry; end

  # source://kamal//lib/kamal/commander.rb#14
  def reset; end

  # source://kamal//lib/kamal/commander.rb#8
  def roles(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commander.rb#8
  def roles_on(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commander.rb#124
  def server; end

  # Returns the value of attribute specific_hosts.
  #
  # source://kamal//lib/kamal/commander.rb#7
  def specific_hosts; end

  # source://kamal//lib/kamal/commander.rb#60
  def specific_hosts=(hosts); end

  # source://kamal//lib/kamal/commander.rb#38
  def specific_primary!; end

  # Returns the value of attribute specific_roles.
  #
  # source://kamal//lib/kamal/commander.rb#7
  def specific_roles; end

  # source://kamal//lib/kamal/commander.rb#47
  def specific_roles=(role_names); end

  # Returns the value of attribute verbosity.
  #
  # source://kamal//lib/kamal/commander.rb#6
  def verbosity; end

  # Sets the attribute verbosity
  #
  # @param value the value to set the attribute verbosity to.
  #
  # source://kamal//lib/kamal/commander.rb#6
  def verbosity=(_arg0); end

  # source://kamal//lib/kamal/commander.rb#73
  def with_specific_hosts(hosts); end

  # source://kamal//lib/kamal/commander.rb#132
  def with_verbosity(level); end

  private

  # Lazy setup of SSHKit
  #
  # source://kamal//lib/kamal/commander.rb#154
  def configure_sshkit_with(config); end

  # source://kamal//lib/kamal/commander.rb#164
  def specifics; end
end

# source://kamal//lib/kamal/commander/specifics.rb#1
class Kamal::Commander::Specifics
  # @return [Specifics] a new instance of Specifics
  #
  # source://kamal//lib/kamal/commander/specifics.rb#5
  def initialize(config, specific_hosts, specific_roles); end

  # source://kamal//lib/kamal/commander/specifics.rb#29
  def accessory_hosts; end

  # source://kamal//lib/kamal/commander/specifics.rb#21
  def app_hosts; end

  # Returns the value of attribute hosts.
  #
  # source://kamal//lib/kamal/commander/specifics.rb#2
  def hosts; end

  # Returns the value of attribute primary_host.
  #
  # source://kamal//lib/kamal/commander/specifics.rb#2
  def primary_host; end

  # Returns the value of attribute primary_role.
  #
  # source://kamal//lib/kamal/commander/specifics.rb#2
  def primary_role; end

  # source://kamal//lib/kamal/commander/specifics.rb#25
  def proxy_hosts; end

  # Returns the value of attribute roles.
  #
  # source://kamal//lib/kamal/commander/specifics.rb#2
  def roles; end

  # source://kamal//lib/kamal/commander/specifics.rb#17
  def roles_on(host); end

  # source://kamal//lib/kamal/commander/specifics.rb#3
  def stable_sort!(elements, &_arg1); end

  private

  # Returns the value of attribute config.
  #
  # source://kamal//lib/kamal/commander/specifics.rb#34
  def config; end

  # source://kamal//lib/kamal/commander/specifics.rb#40
  def primary_or_first_role(roles); end

  # source://kamal//lib/kamal/commander/specifics.rb#36
  def primary_specific_role; end

  # source://kamal//lib/kamal/commander/specifics.rb#59
  def sort_primary_role_hosts_first!(hosts); end

  # Returns the value of attribute specific_hosts.
  #
  # source://kamal//lib/kamal/commander/specifics.rb#34
  def specific_hosts; end

  # Returns the value of attribute specific_roles.
  #
  # source://kamal//lib/kamal/commander/specifics.rb#34
  def specific_roles; end

  # source://kamal//lib/kamal/commander/specifics.rb#49
  def specified_hosts; end

  # source://kamal//lib/kamal/commander/specifics.rb#44
  def specified_roles; end
end

# source://kamal//lib/kamal/commands.rb#1
module Kamal::Commands; end

# source://kamal//lib/kamal/commands/accessory.rb#1
class Kamal::Commands::Accessory < ::Kamal::Commands::Base
  include ::Kamal::Commands::Accessory::Proxy

  # @return [Accessory] a new instance of Accessory
  #
  # source://kamal//lib/kamal/commands/accessory.rb#10
  def initialize(config, name:); end

  # Returns the value of attribute accessory_config.
  #
  # source://kamal//lib/kamal/commands/accessory.rb#4
  def accessory_config; end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def cmd(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def directories(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#105
  def ensure_env_directory; end

  # source://kamal//lib/kamal/commands/accessory.rb#87
  def ensure_local_file_present(local_file); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def env_args(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def env_directory(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#57
  def execute_in_existing_container(*command, interactive: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/accessory.rb#75
  def execute_in_existing_container_over_ssh(*command); end

  # source://kamal//lib/kamal/commands/accessory.rb#64
  def execute_in_new_container(*command, interactive: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/accessory.rb#79
  def execute_in_new_container_over_ssh(*command); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def files(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#50
  def follow_logs(timestamps: T.unsafe(nil), grep: T.unsafe(nil), grep_options: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def hosts(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def image(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#40
  def info(all: T.unsafe(nil), quiet: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def label_args(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#44
  def logs(timestamps: T.unsafe(nil), since: T.unsafe(nil), lines: T.unsafe(nil), grep: T.unsafe(nil), grep_options: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def network_args(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def option_args(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def port(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def proxy(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def publish_args(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def registry(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#97
  def remove_container; end

  # source://kamal//lib/kamal/commands/accessory.rb#101
  def remove_image; end

  # source://kamal//lib/kamal/commands/accessory.rb#93
  def remove_service_directory; end

  # source://kamal//lib/kamal/commands/accessory.rb#15
  def run(host: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/accessory.rb#83
  def run_over_ssh(command); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def running_proxy?(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def secrets_io(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def secrets_path(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def service_name(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory.rb#32
  def start; end

  # source://kamal//lib/kamal/commands/accessory.rb#36
  def stop; end

  # source://kamal//lib/kamal/commands/accessory.rb#5
  def volume_args(*_arg0, **_arg1, &_arg2); end

  private

  # source://kamal//lib/kamal/commands/accessory.rb#110
  def service_filter; end
end

# source://kamal//lib/kamal/commands/accessory/proxy.rb#1
module Kamal::Commands::Accessory::Proxy
  # source://kamal//lib/kamal/commands/accessory/proxy.rb#4
  def deploy(target:); end

  # source://kamal//lib/kamal/commands/accessory/proxy.rb#2
  def proxy_container_name(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/accessory/proxy.rb#8
  def remove; end

  private

  # source://kamal//lib/kamal/commands/accessory/proxy.rb#13
  def proxy_exec(*command); end
end

# source://kamal//lib/kamal/commands/app.rb#1
class Kamal::Commands::App < ::Kamal::Commands::Base
  include ::Kamal::Commands::App::Proxy
  include ::Kamal::Commands::App::Logging
  include ::Kamal::Commands::App::Images
  include ::Kamal::Commands::App::Execution
  include ::Kamal::Commands::App::ErrorPages
  include ::Kamal::Commands::App::Containers
  include ::Kamal::Commands::App::Assets

  # @return [App] a new instance of App
  #
  # source://kamal//lib/kamal/commands/app.rb#10
  def initialize(config, role: T.unsafe(nil), host: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/app.rb#59
  def container_id_for_version(version, only_running: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/app.rb#8
  def container_name(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/app.rb#55
  def current_running_container_id; end

  # source://kamal//lib/kamal/commands/app.rb#63
  def current_running_version; end

  # source://kamal//lib/kamal/commands/app.rb#75
  def ensure_env_directory; end

  # Returns the value of attribute host.
  #
  # source://kamal//lib/kamal/commands/app.rb#6
  def host; end

  # source://kamal//lib/kamal/commands/app.rb#50
  def info; end

  # source://kamal//lib/kamal/commands/app.rb#69
  def list_versions(*docker_args, statuses: T.unsafe(nil)); end

  # Returns the value of attribute role.
  #
  # source://kamal//lib/kamal/commands/app.rb#6
  def role; end

  # source://kamal//lib/kamal/commands/app.rb#16
  def run(hostname: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/app.rb#36
  def start; end

  # source://kamal//lib/kamal/commands/app.rb#40
  def status(version:); end

  # source://kamal//lib/kamal/commands/app.rb#44
  def stop(version: T.unsafe(nil)); end

  private

  # source://kamal//lib/kamal/commands/app.rb#98
  def container_filter_args(statuses: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/app.rb#111
  def container_filters(statuses: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/app.rb#84
  def current_running_container(format:); end

  # source://kamal//lib/kamal/commands/app.rb#106
  def extract_version_from_name; end

  # source://kamal//lib/kamal/commands/app.rb#102
  def image_filter_args; end

  # source://kamal//lib/kamal/commands/app.rb#121
  def image_filters; end

  # source://kamal//lib/kamal/commands/app.rb#94
  def latest_container(format:, filters: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/app.rb#90
  def latest_image_container(format:); end

  # source://kamal//lib/kamal/commands/app.rb#80
  def latest_image_id; end
end

# source://kamal//lib/kamal/commands/app.rb#4
Kamal::Commands::App::ACTIVE_DOCKER_STATUSES = T.let(T.unsafe(nil), Array)

# source://kamal//lib/kamal/commands/app/assets.rb#1
module Kamal::Commands::App::Assets
  # source://kamal//lib/kamal/commands/app/assets.rb#30
  def clean_up_assets; end

  # source://kamal//lib/kamal/commands/app/assets.rb#2
  def extract_assets; end

  # source://kamal//lib/kamal/commands/app/assets.rb#14
  def sync_asset_volumes(old_version: T.unsafe(nil)); end

  private

  # source://kamal//lib/kamal/commands/app/assets.rb#48
  def copy_contents(source, destination, continue_on_error: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/app/assets.rb#37
  def find_and_remove_older_siblings(path); end
end

# source://kamal//lib/kamal/commands/app/containers.rb#1
module Kamal::Commands::App::Containers
  # source://kamal//lib/kamal/commands/app/containers.rb#26
  def container_health_log(version:); end

  # source://kamal//lib/kamal/commands/app/containers.rb#8
  def list_container_names; end

  # source://kamal//lib/kamal/commands/app/containers.rb#4
  def list_containers; end

  # source://kamal//lib/kamal/commands/app/containers.rb#12
  def remove_container(version:); end

  # source://kamal//lib/kamal/commands/app/containers.rb#22
  def remove_containers; end

  # source://kamal//lib/kamal/commands/app/containers.rb#18
  def rename_container(version:, new_version:); end
end

# source://kamal//lib/kamal/commands/app/containers.rb#2
Kamal::Commands::App::Containers::DOCKER_HEALTH_LOG_FORMAT = T.let(T.unsafe(nil), String)

# source://kamal//lib/kamal/commands/app/error_pages.rb#1
module Kamal::Commands::App::ErrorPages
  # source://kamal//lib/kamal/commands/app/error_pages.rb#6
  def clean_up_error_pages; end

  # source://kamal//lib/kamal/commands/app/error_pages.rb#2
  def create_error_pages_directory; end
end

# source://kamal//lib/kamal/commands/app/execution.rb#1
module Kamal::Commands::App::Execution
  # source://kamal//lib/kamal/commands/app/execution.rb#2
  def execute_in_existing_container(*command, env:, interactive: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/app/execution.rb#25
  def execute_in_existing_container_over_ssh(*command, env:); end

  # source://kamal//lib/kamal/commands/app/execution.rb#10
  def execute_in_new_container(*command, env:, interactive: T.unsafe(nil), detach: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/app/execution.rb#29
  def execute_in_new_container_over_ssh(*command, env:); end
end

# source://kamal//lib/kamal/commands/app/images.rb#1
module Kamal::Commands::App::Images
  # source://kamal//lib/kamal/commands/app/images.rb#2
  def list_images; end

  # source://kamal//lib/kamal/commands/app/images.rb#6
  def remove_images; end

  # source://kamal//lib/kamal/commands/app/images.rb#10
  def tag_latest_image; end
end

# source://kamal//lib/kamal/commands/app/logging.rb#1
module Kamal::Commands::App::Logging
  # source://kamal//lib/kamal/commands/app/logging.rb#9
  def follow_logs(host:, container_id: T.unsafe(nil), timestamps: T.unsafe(nil), lines: T.unsafe(nil), grep: T.unsafe(nil), grep_options: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/app/logging.rb#2
  def logs(container_id: T.unsafe(nil), timestamps: T.unsafe(nil), since: T.unsafe(nil), lines: T.unsafe(nil), grep: T.unsafe(nil), grep_options: T.unsafe(nil)); end

  private

  # source://kamal//lib/kamal/commands/app/logging.rb#21
  def container_id_command(container_id); end
end

# source://kamal//lib/kamal/commands/app/proxy.rb#1
module Kamal::Commands::App::Proxy
  # source://kamal//lib/kamal/commands/app/proxy.rb#24
  def create_ssl_directory; end

  # source://kamal//lib/kamal/commands/app/proxy.rb#4
  def deploy(target:); end

  # source://kamal//lib/kamal/commands/app/proxy.rb#12
  def live; end

  # source://kamal//lib/kamal/commands/app/proxy.rb#16
  def maintenance(**options); end

  # source://kamal//lib/kamal/commands/app/proxy.rb#2
  def proxy_container_name(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/app/proxy.rb#8
  def remove; end

  # source://kamal//lib/kamal/commands/app/proxy.rb#20
  def remove_proxy_app_directory; end

  private

  # source://kamal//lib/kamal/commands/app/proxy.rb#29
  def proxy_exec(*command); end
end

# source://kamal//lib/kamal/commands/auditor.rb#1
class Kamal::Commands::Auditor < ::Kamal::Commands::Base
  # @return [Auditor] a new instance of Auditor
  #
  # source://kamal//lib/kamal/commands/auditor.rb#5
  def initialize(config, **details); end

  # Returns the value of attribute details.
  #
  # source://kamal//lib/kamal/commands/auditor.rb#2
  def details; end

  # source://kamal//lib/kamal/commands/auditor.rb#3
  def escape_shell_value(value, &_arg1); end

  # Runs remotely
  #
  # source://kamal//lib/kamal/commands/auditor.rb#11
  def record(line, **details); end

  # source://kamal//lib/kamal/commands/auditor.rb#17
  def reveal; end

  private

  # source://kamal//lib/kamal/commands/auditor.rb#36
  def audit_line(line, **details); end

  # source://kamal//lib/kamal/commands/auditor.rb#22
  def audit_log_file; end

  # source://kamal//lib/kamal/commands/auditor.rb#28
  def audit_tags(**details); end

  # source://kamal//lib/kamal/commands/auditor.rb#32
  def make_run_directory; end
end

# source://kamal//lib/kamal/commands/base.rb#2
class Kamal::Commands::Base
  # @return [Base] a new instance of Base
  #
  # source://kamal//lib/kamal/commands/base.rb#9
  def initialize(config); end

  # source://kamal//lib/kamal/commands/base.rb#3
  def argumentize(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute config.
  #
  # source://kamal//lib/kamal/commands/base.rb#7
  def config; end

  # Sets the attribute config
  #
  # @param value the value to set the attribute config to.
  #
  # source://kamal//lib/kamal/commands/base.rb#7
  def config=(_arg0); end

  # source://kamal//lib/kamal/commands/base.rb#17
  def container_id_for(container_name:, only_running: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/base.rb#37
  def ensure_docker_installed; end

  # source://kamal//lib/kamal/commands/base.rb#25
  def make_directory(path); end

  # source://kamal//lib/kamal/commands/base.rb#21
  def make_directory_for(remote_file); end

  # source://kamal//lib/kamal/commands/base.rb#29
  def remove_directory(path); end

  # source://kamal//lib/kamal/commands/base.rb#33
  def remove_file(path); end

  # source://kamal//lib/kamal/commands/base.rb#13
  def run_over_ssh(*command, host:); end

  # source://kamal//lib/kamal/commands/base.rb#3
  def sensitive(*_arg0, **_arg1, &_arg2); end

  private

  # source://kamal//lib/kamal/commands/base.rb#67
  def any(*commands); end

  # source://kamal//lib/kamal/commands/base.rb#59
  def append(*commands); end

  # source://kamal//lib/kamal/commands/base.rb#51
  def chain(*commands); end

  # source://kamal//lib/kamal/commands/base.rb#44
  def combine(*commands, by: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/base.rb#83
  def docker(*args); end

  # source://kamal//lib/kamal/commands/base.rb#130
  def docker_interactive_args; end

  # source://kamal//lib/kamal/commands/base.rb#126
  def ensure_local_buildx_installed; end

  # source://kamal//lib/kamal/commands/base.rb#122
  def ensure_local_docker_installed; end

  # source://kamal//lib/kamal/commands/base.rb#91
  def git(*args, path: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/base.rb#95
  def grep(*args); end

  # source://kamal//lib/kamal/commands/base.rb#87
  def pack(*args); end

  # source://kamal//lib/kamal/commands/base.rb#55
  def pipe(*commands); end

  # source://kamal//lib/kamal/commands/base.rb#79
  def shell(command); end

  # source://kamal//lib/kamal/commands/base.rb#116
  def ssh_keys; end

  # source://kamal//lib/kamal/commands/base.rb#112
  def ssh_keys_args; end

  # source://kamal//lib/kamal/commands/base.rb#103
  def ssh_proxy_args; end

  # source://kamal//lib/kamal/commands/base.rb#71
  def substitute(*commands); end

  # source://kamal//lib/kamal/commands/base.rb#99
  def tags(**details); end

  # source://kamal//lib/kamal/commands/base.rb#63
  def write(*commands); end

  # source://kamal//lib/kamal/commands/base.rb#75
  def xargs(command); end
end

# source://kamal//lib/kamal/commands/base.rb#5
Kamal::Commands::Base::DOCKER_HEALTH_STATUS_FORMAT = T.let(T.unsafe(nil), String)

# source://kamal//lib/kamal/commands/builder.rb#3
class Kamal::Commands::Builder < ::Kamal::Commands::Base
  include ::Kamal::Commands::Builder::Clone

  # source://kamal//lib/kamal/commands/builder.rb#4
  def clean(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder.rb#45
  def cloud; end

  # source://kamal//lib/kamal/commands/builder.rb#5
  def cloud?(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder.rb#4
  def create(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder.rb#4
  def dev(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder.rb#4
  def first_mirror(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder.rb#37
  def hybrid; end

  # source://kamal//lib/kamal/commands/builder.rb#4
  def info(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder.rb#4
  def inspect_builder(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder.rb#33
  def local; end

  # source://kamal//lib/kamal/commands/builder.rb#5
  def local?(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder.rb#9
  def name; end

  # source://kamal//lib/kamal/commands/builder.rb#41
  def pack; end

  # source://kamal//lib/kamal/commands/builder.rb#5
  def pack?(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder.rb#4
  def pull(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder.rb#4
  def push(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder.rb#29
  def remote; end

  # source://kamal//lib/kamal/commands/builder.rb#5
  def remote?(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder.rb#4
  def remove(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder.rb#13
  def target; end

  # source://kamal//lib/kamal/commands/builder.rb#4
  def validate_image(*_arg0, **_arg1, &_arg2); end
end

# source://kamal//lib/kamal/commands/builder/base.rb#1
class Kamal::Commands::Builder::Base < ::Kamal::Commands::Base
  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def arches(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def args(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#6
  def argumentize(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#46
  def build_context; end

  # source://kamal//lib/kamal/commands/builder/base.rb#42
  def build_options; end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def cache_from(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def cache_to(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#13
  def clean; end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def docker_driver?(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def dockerfile(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def driver(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#59
  def first_mirror; end

  # source://kamal//lib/kamal/commands/builder/base.rb#32
  def info; end

  # source://kamal//lib/kamal/commands/builder/base.rb#38
  def inspect_builder; end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def local_arches(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def pack?(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def pack_builder(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def pack_buildpacks(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def provenance(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#28
  def pull; end

  # source://kamal//lib/kamal/commands/builder/base.rb#17
  def push(export_action = T.unsafe(nil), tag_as_dirty: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def remote(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def remote_arches(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def sbom(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def secrets(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def ssh(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#7
  def target(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/builder/base.rb#50
  def validate_image; end

  private

  # source://kamal//lib/kamal/commands/builder/base.rb#85
  def build_args; end

  # source://kamal//lib/kamal/commands/builder/base.rb#74
  def build_cache; end

  # source://kamal//lib/kamal/commands/builder/base.rb#93
  def build_dockerfile; end

  # source://kamal//lib/kamal/commands/builder/base.rb#81
  def build_labels; end

  # source://kamal//lib/kamal/commands/builder/base.rb#89
  def build_secrets; end

  # source://kamal//lib/kamal/commands/builder/base.rb#105
  def build_ssh; end

  # source://kamal//lib/kamal/commands/builder/base.rb#64
  def build_tag_names(tag_as_dirty: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/builder/base.rb#70
  def build_tag_options(tag_as_dirty: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/builder/base.rb#101
  def build_target; end

  # source://kamal//lib/kamal/commands/builder/base.rb#117
  def builder_config; end

  # source://kamal//lib/kamal/commands/builder/base.rb#109
  def builder_provenance; end

  # source://kamal//lib/kamal/commands/builder/base.rb#113
  def builder_sbom; end

  # source://kamal//lib/kamal/commands/builder/base.rb#121
  def platform_options(arches); end
end

# source://kamal//lib/kamal/commands/builder/base.rb#2
class Kamal::Commands::Builder::Base::BuilderError < ::StandardError; end

# source://kamal//lib/kamal/commands/builder/base.rb#4
Kamal::Commands::Builder::Base::ENDPOINT_DOCKER_HOST_INSPECT = T.let(T.unsafe(nil), String)

# source://kamal//lib/kamal/commands/builder/clone.rb#1
module Kamal::Commands::Builder::Clone
  # source://kamal//lib/kamal/commands/builder/clone.rb#2
  def clone; end

  # source://kamal//lib/kamal/commands/builder/clone.rb#6
  def clone_reset_steps; end

  # source://kamal//lib/kamal/commands/builder/clone.rb#20
  def clone_revision; end

  # source://kamal//lib/kamal/commands/builder/clone.rb#16
  def clone_status; end

  # source://kamal//lib/kamal/commands/builder/clone.rb#28
  def escaped_build_directory; end

  # source://kamal//lib/kamal/commands/builder/clone.rb#24
  def escaped_root; end
end

# source://kamal//lib/kamal/commands/builder/cloud.rb#1
class Kamal::Commands::Builder::Cloud < ::Kamal::Commands::Builder::Base
  # Expects `driver` to be of format "cloud docker-org-name/builder-name"
  #
  # source://kamal//lib/kamal/commands/builder/cloud.rb#4
  def create; end

  # source://kamal//lib/kamal/commands/builder/cloud.rb#8
  def remove; end

  private

  # source://kamal//lib/kamal/commands/builder/cloud.rb#13
  def builder_name; end

  # source://kamal//lib/kamal/commands/builder/cloud.rb#17
  def inspect_buildx; end
end

# source://kamal//lib/kamal/commands/builder/hybrid.rb#1
class Kamal::Commands::Builder::Hybrid < ::Kamal::Commands::Builder::Remote
  # source://kamal//lib/kamal/commands/builder/hybrid.rb#2
  def create; end

  private

  # source://kamal//lib/kamal/commands/builder/hybrid.rb#18
  def append_remote_buildx; end

  # source://kamal//lib/kamal/commands/builder/hybrid.rb#10
  def builder_name; end

  # source://kamal//lib/kamal/commands/builder/hybrid.rb#14
  def create_local_buildx; end
end

# source://kamal//lib/kamal/commands/builder/local.rb#1
class Kamal::Commands::Builder::Local < ::Kamal::Commands::Builder::Base
  # source://kamal//lib/kamal/commands/builder/local.rb#2
  def create; end

  # source://kamal//lib/kamal/commands/builder/local.rb#6
  def remove; end

  private

  # source://kamal//lib/kamal/commands/builder/local.rb#11
  def builder_name; end
end

# source://kamal//lib/kamal/commands/builder/pack.rb#1
class Kamal::Commands::Builder::Pack < ::Kamal::Commands::Builder::Base
  # source://kamal//lib/kamal/commands/builder/pack.rb#10
  def info; end

  # source://kamal//lib/kamal/commands/builder/pack.rb#13
  def inspect_builder; end

  # source://kamal//lib/kamal/commands/builder/pack.rb#2
  def push(export_action = T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/builder/pack.rb#8
  def remove; end

  private

  # source://kamal//lib/kamal/commands/builder/pack.rb#16
  def build; end

  # source://kamal//lib/kamal/commands/builder/pack.rb#43
  def buildpacks; end

  # source://kamal//lib/kamal/commands/builder/pack.rb#31
  def export(export_action); end

  # source://kamal//lib/kamal/commands/builder/pack.rb#39
  def platform; end
end

# source://kamal//lib/kamal/commands/builder/remote.rb#1
class Kamal::Commands::Builder::Remote < ::Kamal::Commands::Builder::Base
  # source://kamal//lib/kamal/commands/builder/remote.rb#2
  def create; end

  # source://kamal//lib/kamal/commands/builder/remote.rb#14
  def info; end

  # source://kamal//lib/kamal/commands/builder/remote.rb#20
  def inspect_builder; end

  # source://kamal//lib/kamal/commands/builder/remote.rb#8
  def remove; end

  private

  # source://kamal//lib/kamal/commands/builder/remote.rb#28
  def builder_name; end

  # source://kamal//lib/kamal/commands/builder/remote.rb#56
  def create_buildx; end

  # source://kamal//lib/kamal/commands/builder/remote.rb#48
  def create_remote_context; end

  # source://kamal//lib/kamal/commands/builder/remote.rb#36
  def inspect_buildx; end

  # source://kamal//lib/kamal/commands/builder/remote.rb#42
  def inspect_remote_context; end

  # source://kamal//lib/kamal/commands/builder/remote.rb#32
  def remote_context_name; end

  # source://kamal//lib/kamal/commands/builder/remote.rb#60
  def remove_buildx; end

  # source://kamal//lib/kamal/commands/builder/remote.rb#52
  def remove_remote_context; end
end

# source://kamal//lib/kamal/commands/docker.rb#1
class Kamal::Commands::Docker < ::Kamal::Commands::Base
  # source://kamal//lib/kamal/commands/docker.rb#22
  def create_network; end

  # Install Docker using the https://github.com/docker/docker-install convenience script.
  #
  # source://kamal//lib/kamal/commands/docker.rb#3
  def install; end

  # Checks the Docker client version. Fails if Docker is not installed.
  #
  # @return [Boolean]
  #
  # source://kamal//lib/kamal/commands/docker.rb#8
  def installed?; end

  # Checks the Docker server version. Fails if Docker is not running.
  #
  # @return [Boolean]
  #
  # source://kamal//lib/kamal/commands/docker.rb#13
  def running?; end

  # Do we have superuser access to install Docker and start system services?
  #
  # @return [Boolean]
  #
  # source://kamal//lib/kamal/commands/docker.rb#18
  def superuser?; end

  private

  # source://kamal//lib/kamal/commands/docker.rb#27
  def get_docker; end
end

# source://kamal//lib/kamal/commands/hook.rb#1
class Kamal::Commands::Hook < ::Kamal::Commands::Base
  # source://kamal//lib/kamal/commands/hook.rb#6
  def env(secrets: T.unsafe(nil), **details); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/commands/hook.rb#12
  def hook_exists?(hook); end

  # source://kamal//lib/kamal/commands/hook.rb#2
  def run(hook); end

  private

  # source://kamal//lib/kamal/commands/hook.rb#17
  def hook_file(hook); end
end

# source://kamal//lib/kamal/commands/lock.rb#5
class Kamal::Commands::Lock < ::Kamal::Commands::Base
  # source://kamal//lib/kamal/commands/lock.rb#6
  def acquire(message, version); end

  # source://kamal//lib/kamal/commands/lock.rb#24
  def ensure_locks_directory; end

  # source://kamal//lib/kamal/commands/lock.rb#12
  def release; end

  # source://kamal//lib/kamal/commands/lock.rb#18
  def status; end

  private

  # source://kamal//lib/kamal/commands/lock.rb#57
  def lock_details(message, version); end

  # source://kamal//lib/kamal/commands/lock.rb#53
  def lock_details_file; end

  # source://kamal//lib/kamal/commands/lock.rb#47
  def lock_dir; end

  # source://kamal//lib/kamal/commands/lock.rb#65
  def locked_by; end

  # source://kamal//lib/kamal/commands/lock.rb#35
  def read_lock_details; end

  # source://kamal//lib/kamal/commands/lock.rb#41
  def stat_lock_dir; end

  # source://kamal//lib/kamal/commands/lock.rb#29
  def write_lock_details(message, version); end
end

# source://kamal//lib/kamal/commands/proxy.rb#1
class Kamal::Commands::Proxy < ::Kamal::Commands::Base
  # source://kamal//lib/kamal/commands/proxy.rb#2
  def argumentize(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/proxy.rb#72
  def boot_config; end

  # source://kamal//lib/kamal/commands/proxy.rb#51
  def cleanup_traefik; end

  # source://kamal//lib/kamal/commands/proxy.rb#68
  def ensure_apps_config_directory; end

  # source://kamal//lib/kamal/commands/proxy.rb#60
  def ensure_proxy_directory; end

  # source://kamal//lib/kamal/commands/proxy.rb#36
  def follow_logs(host:, timestamps: T.unsafe(nil), grep: T.unsafe(nil), grep_options: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/proxy.rb#20
  def info; end

  # source://kamal//lib/kamal/commands/proxy.rb#30
  def logs(timestamps: T.unsafe(nil), since: T.unsafe(nil), lines: T.unsafe(nil), grep: T.unsafe(nil), grep_options: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/proxy.rb#2
  def optionize(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/commands/proxy.rb#76
  def read_boot_options; end

  # source://kamal//lib/kamal/commands/proxy.rb#80
  def read_image; end

  # source://kamal//lib/kamal/commands/proxy.rb#84
  def read_image_version; end

  # source://kamal//lib/kamal/commands/proxy.rb#88
  def read_run_command; end

  # source://kamal//lib/kamal/commands/proxy.rb#43
  def remove_container; end

  # source://kamal//lib/kamal/commands/proxy.rb#47
  def remove_image; end

  # source://kamal//lib/kamal/commands/proxy.rb#64
  def remove_proxy_directory; end

  # source://kamal//lib/kamal/commands/proxy.rb#92
  def reset_boot_options; end

  # source://kamal//lib/kamal/commands/proxy.rb#96
  def reset_image; end

  # source://kamal//lib/kamal/commands/proxy.rb#100
  def reset_image_version; end

  # source://kamal//lib/kamal/commands/proxy.rb#104
  def reset_run_command; end

  # source://kamal//lib/kamal/commands/proxy.rb#4
  def run; end

  # source://kamal//lib/kamal/commands/proxy.rb#8
  def start; end

  # source://kamal//lib/kamal/commands/proxy.rb#16
  def start_or_run; end

  # source://kamal//lib/kamal/commands/proxy.rb#12
  def stop(name: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/proxy.rb#24
  def version; end

  private

  # source://kamal//lib/kamal/commands/proxy.rb#109
  def container_name; end

  # source://kamal//lib/kamal/commands/proxy.rb#117
  def docker_run; end

  # source://kamal//lib/kamal/commands/proxy.rb#113
  def read_file(file, default: T.unsafe(nil)); end
end

# source://kamal//lib/kamal/commands/prune.rb#4
class Kamal::Commands::Prune < ::Kamal::Commands::Base
  # source://kamal//lib/kamal/commands/prune.rb#16
  def app_containers(retain:); end

  # source://kamal//lib/kamal/commands/prune.rb#5
  def dangling_images; end

  # source://kamal//lib/kamal/commands/prune.rb#9
  def tagged_images; end

  private

  # source://kamal//lib/kamal/commands/prune.rb#28
  def active_image_list; end

  # source://kamal//lib/kamal/commands/prune.rb#35
  def service_filter; end

  # source://kamal//lib/kamal/commands/prune.rb#24
  def stopped_containers_filters; end
end

# source://kamal//lib/kamal/commands/registry.rb#1
class Kamal::Commands::Registry < ::Kamal::Commands::Base
  # source://kamal//lib/kamal/commands/registry.rb#2
  def login(registry_config: T.unsafe(nil)); end

  # source://kamal//lib/kamal/commands/registry.rb#11
  def logout(registry_config: T.unsafe(nil)); end
end

# source://kamal//lib/kamal/commands/server.rb#1
class Kamal::Commands::Server < ::Kamal::Commands::Base
  # source://kamal//lib/kamal/commands/server.rb#10
  def app_directory_count; end

  # source://kamal//lib/kamal/commands/server.rb#2
  def ensure_run_directory; end

  # source://kamal//lib/kamal/commands/server.rb#6
  def remove_app_directory; end
end

# source://kamal//lib/kamal/configuration.rb#8
class Kamal::Configuration
  include ::Kamal::Configuration::Validation
  extend ::Kamal::Configuration::Validation::ClassMethods

  # @return [Configuration] a new instance of Configuration
  #
  # source://kamal//lib/kamal/configuration.rb#46
  def initialize(raw_config, destination: T.unsafe(nil), version: T.unsafe(nil), validate: T.unsafe(nil)); end

  # source://kamal//lib/kamal/configuration.rb#89
  def abbreviated_version; end

  # source://kamal//lib/kamal/configuration.rb#164
  def absolute_image; end

  # Returns the value of attribute accessories.
  #
  # source://kamal//lib/kamal/configuration.rb#13
  def accessories; end

  # source://kamal//lib/kamal/configuration.rb#116
  def accessory(name); end

  # Returns the value of attribute aliases.
  #
  # source://kamal//lib/kamal/configuration.rb#13
  def aliases; end

  # source://kamal//lib/kamal/configuration.rb#120
  def all_hosts; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration.rb#140
  def allow_empty_roles?; end

  # source://kamal//lib/kamal/configuration.rb#220
  def app_directory; end

  # source://kamal//lib/kamal/configuration.rb#124
  def app_hosts; end

  # source://kamal//lib/kamal/configuration.rb#216
  def apps_directory; end

  # source://kamal//lib/kamal/configuration.rb#10
  def argumentize(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/configuration.rb#236
  def asset_path; end

  # source://kamal//lib/kamal/configuration.rb#228
  def assets_directory; end

  # Returns the value of attribute boot.
  #
  # source://kamal//lib/kamal/configuration.rb#13
  def boot; end

  # Returns the value of attribute builder.
  #
  # source://kamal//lib/kamal/configuration.rb#13
  def builder; end

  # source://kamal//lib/kamal/configuration.rb#204
  def deploy_timeout; end

  # Returns the value of attribute destination.
  #
  # source://kamal//lib/kamal/configuration.rb#12
  def destination; end

  # source://kamal//lib/kamal/configuration.rb#208
  def drain_timeout; end

  # Returns the value of attribute env.
  #
  # source://kamal//lib/kamal/configuration.rb#13
  def env; end

  # source://kamal//lib/kamal/configuration.rb#224
  def env_directory; end

  # source://kamal//lib/kamal/configuration.rb#252
  def env_tag(name); end

  # source://kamal//lib/kamal/configuration.rb#244
  def env_tags; end

  # source://kamal//lib/kamal/configuration.rb#240
  def error_pages_path; end

  # source://kamal//lib/kamal/configuration.rb#9
  def hooks_path; end

  # source://kamal//lib/kamal/configuration.rb#9
  def image(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/configuration.rb#9
  def labels(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/configuration.rb#168
  def latest_image; end

  # source://kamal//lib/kamal/configuration.rb#172
  def latest_tag; end

  # Returns the value of attribute logging.
  #
  # source://kamal//lib/kamal/configuration.rb#13
  def logging; end

  # source://kamal//lib/kamal/configuration.rb#196
  def logging_args; end

  # source://kamal//lib/kamal/configuration.rb#100
  def minimum_version; end

  # source://kamal//lib/kamal/configuration.rb#10
  def optionize(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/configuration.rb#128
  def primary_host; end

  # source://kamal//lib/kamal/configuration.rb#136
  def primary_role; end

  # source://kamal//lib/kamal/configuration.rb#132
  def primary_role_name; end

  # Returns the value of attribute proxy.
  #
  # source://kamal//lib/kamal/configuration.rb#13
  def proxy; end

  # source://kamal//lib/kamal/configuration.rb#152
  def proxy_accessories; end

  # Returns the value of attribute proxy_boot.
  #
  # source://kamal//lib/kamal/configuration.rb#13
  def proxy_boot; end

  # source://kamal//lib/kamal/configuration.rb#156
  def proxy_hosts; end

  # source://kamal//lib/kamal/configuration.rb#148
  def proxy_role_names; end

  # source://kamal//lib/kamal/configuration.rb#144
  def proxy_roles; end

  # Returns the value of attribute raw_config.
  #
  # source://kamal//lib/kamal/configuration.rb#12
  def raw_config; end

  # source://kamal//lib/kamal/configuration.rb#200
  def readiness_delay; end

  # Returns the value of attribute registry.
  #
  # source://kamal//lib/kamal/configuration.rb#13
  def registry; end

  # source://kamal//lib/kamal/configuration.rb#160
  def repository; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration.rb#180
  def require_destination?; end

  # source://kamal//lib/kamal/configuration.rb#184
  def retain_containers; end

  # source://kamal//lib/kamal/configuration.rb#112
  def role(name); end

  # source://kamal//lib/kamal/configuration.rb#108
  def roles; end

  # source://kamal//lib/kamal/configuration.rb#212
  def run_directory; end

  # Returns the value of attribute secrets.
  #
  # source://kamal//lib/kamal/configuration.rb#12
  def secrets; end

  # Returns the value of attribute servers.
  #
  # source://kamal//lib/kamal/configuration.rb#13
  def servers; end

  # source://kamal//lib/kamal/configuration.rb#9
  def service(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/configuration.rb#104
  def service_and_destination; end

  # source://kamal//lib/kamal/configuration.rb#176
  def service_with_version; end

  # Returns the value of attribute ssh.
  #
  # source://kamal//lib/kamal/configuration.rb#13
  def ssh; end

  # Returns the value of attribute sshkit.
  #
  # source://kamal//lib/kamal/configuration.rb#13
  def sshkit; end

  # source://kamal//lib/kamal/configuration.rb#256
  def to_h; end

  # source://kamal//lib/kamal/configuration.rb#85
  def version; end

  # source://kamal//lib/kamal/configuration.rb#81
  def version=(version); end

  # source://kamal//lib/kamal/configuration.rb#188
  def volume_args; end

  private

  # Will raise ArgumentError if any required config keys are missing
  #
  # source://kamal//lib/kamal/configuration.rb#276
  def ensure_destination_if_required; end

  # source://kamal//lib/kamal/configuration.rb#332
  def ensure_no_traefik_reboot_hooks; end

  # source://kamal//lib/kamal/configuration.rb#342
  def ensure_one_host_for_ssl_roles; end

  # source://kamal//lib/kamal/configuration.rb#284
  def ensure_required_keys_present; end

  # @raise [Kamal::ConfigurationError]
  #
  # source://kamal//lib/kamal/configuration.rb#326
  def ensure_retain_containers_valid; end

  # @raise [Kamal::ConfigurationError]
  #
  # source://kamal//lib/kamal/configuration.rb#348
  def ensure_unique_hosts_for_ssl_roles; end

  # source://kamal//lib/kamal/configuration.rb#318
  def ensure_valid_kamal_version; end

  # @raise [Kamal::ConfigurationError]
  #
  # source://kamal//lib/kamal/configuration.rb#312
  def ensure_valid_service_name; end

  # source://kamal//lib/kamal/configuration.rb#361
  def git_version; end

  # source://kamal//lib/kamal/configuration.rb#357
  def role_names; end

  class << self
    # source://kamal//lib/kamal/configuration.rb#18
    def create_from(config_file:, destination: T.unsafe(nil), version: T.unsafe(nil)); end

    private

    # source://kamal//lib/kamal/configuration.rb#41
    def destination_config_file(base_config_file, destination); end

    # source://kamal//lib/kamal/configuration.rb#31
    def load_config_file(file); end

    # source://kamal//lib/kamal/configuration.rb#27
    def load_config_files(*files); end
  end
end

# source://kamal//lib/kamal/configuration/accessory.rb#1
class Kamal::Configuration::Accessory
  include ::Kamal::Configuration::Validation
  extend ::Kamal::Configuration::Validation::ClassMethods

  # @return [Accessory] a new instance of Accessory
  #
  # source://kamal//lib/kamal/configuration/accessory.rb#10
  def initialize(name, config:); end

  # source://kamal//lib/kamal/configuration/accessory.rb#6
  def argumentize(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/configuration/accessory.rb#106
  def cmd; end

  # source://kamal//lib/kamal/configuration/accessory.rb#83
  def directories; end

  # Returns the value of attribute env.
  #
  # source://kamal//lib/kamal/configuration/accessory.rb#8
  def env; end

  # source://kamal//lib/kamal/configuration/accessory.rb#60
  def env_args; end

  # source://kamal//lib/kamal/configuration/accessory.rb#64
  def env_directory; end

  # source://kamal//lib/kamal/configuration/accessory.rb#76
  def files; end

  # source://kamal//lib/kamal/configuration/accessory.rb#34
  def hosts; end

  # source://kamal//lib/kamal/configuration/accessory.rb#30
  def image; end

  # source://kamal//lib/kamal/configuration/accessory.rb#56
  def label_args; end

  # source://kamal//lib/kamal/configuration/accessory.rb#52
  def labels; end

  # Returns the value of attribute name.
  #
  # source://kamal//lib/kamal/configuration/accessory.rb#8
  def name; end

  # source://kamal//lib/kamal/configuration/accessory.rb#44
  def network_args; end

  # source://kamal//lib/kamal/configuration/accessory.rb#98
  def option_args; end

  # source://kamal//lib/kamal/configuration/accessory.rb#6
  def optionize(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/configuration/accessory.rb#38
  def port; end

  # Returns the value of attribute proxy.
  #
  # source://kamal//lib/kamal/configuration/accessory.rb#8
  def proxy; end

  # source://kamal//lib/kamal/configuration/accessory.rb#48
  def publish_args; end

  # Returns the value of attribute registry.
  #
  # source://kamal//lib/kamal/configuration/accessory.rb#8
  def registry; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/accessory.rb#110
  def running_proxy?; end

  # source://kamal//lib/kamal/configuration/accessory.rb#68
  def secrets_io; end

  # source://kamal//lib/kamal/configuration/accessory.rb#72
  def secrets_path; end

  # source://kamal//lib/kamal/configuration/accessory.rb#26
  def service_name; end

  # source://kamal//lib/kamal/configuration/accessory.rb#94
  def volume_args; end

  # source://kamal//lib/kamal/configuration/accessory.rb#90
  def volumes; end

  private

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/accessory.rb#188
  def absolute_path?(path); end

  # Returns the value of attribute accessory_config.
  #
  # source://kamal//lib/kamal/configuration/accessory.rb#115
  def accessory_config; end

  # Returns the value of attribute config.
  #
  # source://kamal//lib/kamal/configuration/accessory.rb#115
  def config; end

  # source://kamal//lib/kamal/configuration/accessory.rb#139
  def default_labels; end

  # source://kamal//lib/kamal/configuration/accessory.rb#234
  def ensure_valid_roles; end

  # source://kamal//lib/kamal/configuration/accessory.rb#184
  def expand_host_path(host_path); end

  # source://kamal//lib/kamal/configuration/accessory.rb#143
  def expand_local_file(local_file); end

  # source://kamal//lib/kamal/configuration/accessory.rb#162
  def expand_remote_file(remote_file); end

  # source://kamal//lib/kamal/configuration/accessory.rb#220
  def extract_hosts_from_config_with_tag(tag); end

  # source://kamal//lib/kamal/configuration/accessory.rb#196
  def hosts_from_host; end

  # source://kamal//lib/kamal/configuration/accessory.rb#200
  def hosts_from_hosts; end

  # source://kamal//lib/kamal/configuration/accessory.rb#204
  def hosts_from_roles; end

  # source://kamal//lib/kamal/configuration/accessory.rb#212
  def hosts_from_tags; end

  # source://kamal//lib/kamal/configuration/accessory.rb#117
  def initialize_env; end

  # source://kamal//lib/kamal/configuration/accessory.rb#124
  def initialize_proxy; end

  # source://kamal//lib/kamal/configuration/accessory.rb#132
  def initialize_registry; end

  # source://kamal//lib/kamal/configuration/accessory.rb#230
  def network; end

  # source://kamal//lib/kamal/configuration/accessory.rb#158
  def read_dynamic_file(local_file); end

  # source://kamal//lib/kamal/configuration/accessory.rb#177
  def remote_directories_as_volumes; end

  # source://kamal//lib/kamal/configuration/accessory.rb#170
  def remote_files_as_volumes; end

  # source://kamal//lib/kamal/configuration/accessory.rb#192
  def service_data_directory; end

  # source://kamal//lib/kamal/configuration/accessory.rb#166
  def specific_volumes; end

  # source://kamal//lib/kamal/configuration/accessory.rb#151
  def with_clear_env_loaded; end
end

# source://kamal//lib/kamal/configuration/accessory.rb#4
Kamal::Configuration::Accessory::DEFAULT_NETWORK = T.let(T.unsafe(nil), String)

# source://kamal//lib/kamal/configuration/alias.rb#1
class Kamal::Configuration::Alias
  include ::Kamal::Configuration::Validation
  extend ::Kamal::Configuration::Validation::ClassMethods

  # @return [Alias] a new instance of Alias
  #
  # source://kamal//lib/kamal/configuration/alias.rb#6
  def initialize(name, config:); end

  # Returns the value of attribute command.
  #
  # source://kamal//lib/kamal/configuration/alias.rb#4
  def command; end

  # Returns the value of attribute name.
  #
  # source://kamal//lib/kamal/configuration/alias.rb#4
  def name; end
end

# source://kamal//lib/kamal/configuration/boot.rb#1
class Kamal::Configuration::Boot
  include ::Kamal::Configuration::Validation
  extend ::Kamal::Configuration::Validation::ClassMethods

  # @return [Boot] a new instance of Boot
  #
  # source://kamal//lib/kamal/configuration/boot.rb#6
  def initialize(config:); end

  # Returns the value of attribute boot_config.
  #
  # source://kamal//lib/kamal/configuration/boot.rb#4
  def boot_config; end

  # Returns the value of attribute host_count.
  #
  # source://kamal//lib/kamal/configuration/boot.rb#4
  def host_count; end

  # source://kamal//lib/kamal/configuration/boot.rb#12
  def limit; end

  # source://kamal//lib/kamal/configuration/boot.rb#22
  def wait; end
end

# source://kamal//lib/kamal/configuration/builder.rb#1
class Kamal::Configuration::Builder
  include ::Kamal::Configuration::Validation
  extend ::Kamal::Configuration::Validation::ClassMethods

  # @return [Builder] a new instance of Builder
  #
  # source://kamal//lib/kamal/configuration/builder.rb#8
  def initialize(config:); end

  # source://kamal//lib/kamal/configuration/builder.rb#26
  def arches; end

  # source://kamal//lib/kamal/configuration/builder.rb#68
  def args; end

  # source://kamal//lib/kamal/configuration/builder.rb#146
  def build_directory; end

  # Returns the value of attribute builder_config.
  #
  # source://kamal//lib/kamal/configuration/builder.rb#4
  def builder_config; end

  # source://kamal//lib/kamal/configuration/builder.rb#104
  def cache_from; end

  # source://kamal//lib/kamal/configuration/builder.rb#115
  def cache_to; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/builder.rb#60
  def cached?; end

  # source://kamal//lib/kamal/configuration/builder.rb#142
  def clone_directory; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/builder.rb#56
  def cloud?; end

  # Returns the value of attribute config.
  #
  # source://kamal//lib/kamal/configuration/builder.rb#4
  def config; end

  # source://kamal//lib/kamal/configuration/builder.rb#84
  def context; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/builder.rb#155
  def docker_driver?; end

  # source://kamal//lib/kamal/configuration/builder.rb#76
  def dockerfile; end

  # source://kamal//lib/kamal/configuration/builder.rb#88
  def driver; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/builder.rb#138
  def git_clone?; end

  # source://kamal//lib/kamal/configuration/builder.rb#5
  def image(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/builder.rb#52
  def local?; end

  # source://kamal//lib/kamal/configuration/builder.rb#30
  def local_arches; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/builder.rb#100
  def local_disabled?; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/builder.rb#64
  def pack?; end

  # source://kamal//lib/kamal/configuration/builder.rb#92
  def pack_builder; end

  # source://kamal//lib/kamal/configuration/builder.rb#96
  def pack_buildpacks; end

  # source://kamal//lib/kamal/configuration/builder.rb#130
  def provenance; end

  # source://kamal//lib/kamal/configuration/builder.rb#22
  def remote; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/builder.rb#48
  def remote?; end

  # source://kamal//lib/kamal/configuration/builder.rb#40
  def remote_arches; end

  # source://kamal//lib/kamal/configuration/builder.rb#134
  def sbom; end

  # source://kamal//lib/kamal/configuration/builder.rb#72
  def secrets; end

  # source://kamal//lib/kamal/configuration/builder.rb#6
  def server(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/configuration/builder.rb#5
  def service(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/configuration/builder.rb#126
  def ssh; end

  # source://kamal//lib/kamal/configuration/builder.rb#80
  def target; end

  # source://kamal//lib/kamal/configuration/builder.rb#18
  def to_h; end

  private

  # source://kamal//lib/kamal/configuration/builder.rb#180
  def cache_from_config_for_gha; end

  # source://kamal//lib/kamal/configuration/builder.rb#184
  def cache_from_config_for_registry; end

  # source://kamal//lib/kamal/configuration/builder.rb#172
  def cache_image; end

  # source://kamal//lib/kamal/configuration/builder.rb#176
  def cache_image_ref; end

  # source://kamal//lib/kamal/configuration/builder.rb#188
  def cache_to_config_for_gha; end

  # source://kamal//lib/kamal/configuration/builder.rb#192
  def cache_to_config_for_registry; end

  # source://kamal//lib/kamal/configuration/builder.rb#208
  def default_arch; end

  # source://kamal//lib/kamal/configuration/builder.rb#204
  def pwd_sha; end

  # source://kamal//lib/kamal/configuration/builder.rb#196
  def repo_basename; end

  # source://kamal//lib/kamal/configuration/builder.rb#200
  def repo_relative_pwd; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/builder.rb#160
  def valid?; end
end

# source://kamal//lib/kamal/configuration/env.rb#1
class Kamal::Configuration::Env
  include ::Kamal::Configuration::Validation
  extend ::Kamal::Configuration::Validation::ClassMethods

  # @return [Env] a new instance of Env
  #
  # source://kamal//lib/kamal/configuration/env.rb#7
  def initialize(config:, secrets:, context: T.unsafe(nil)); end

  # source://kamal//lib/kamal/configuration/env.rb#5
  def argumentize(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute clear.
  #
  # source://kamal//lib/kamal/configuration/env.rb#4
  def clear; end

  # source://kamal//lib/kamal/configuration/env.rb#15
  def clear_args; end

  # Returns the value of attribute context.
  #
  # source://kamal//lib/kamal/configuration/env.rb#4
  def context; end

  # source://kamal//lib/kamal/configuration/env.rb#23
  def merge(other); end

  # Returns the value of attribute secret_keys.
  #
  # source://kamal//lib/kamal/configuration/env.rb#4
  def secret_keys; end

  # source://kamal//lib/kamal/configuration/env.rb#19
  def secrets_io; end

  private

  # source://kamal//lib/kamal/configuration/env.rb#30
  def aliased_secrets; end

  # source://kamal//lib/kamal/configuration/env.rb#34
  def extract_alias(key); end
end

# source://kamal//lib/kamal/configuration/env/tag.rb#1
class Kamal::Configuration::Env::Tag
  # @return [Tag] a new instance of Tag
  #
  # source://kamal//lib/kamal/configuration/env/tag.rb#4
  def initialize(name, config:, secrets:); end

  # Returns the value of attribute config.
  #
  # source://kamal//lib/kamal/configuration/env/tag.rb#2
  def config; end

  # source://kamal//lib/kamal/configuration/env/tag.rb#10
  def env; end

  # Returns the value of attribute name.
  #
  # source://kamal//lib/kamal/configuration/env/tag.rb#2
  def name; end

  # Returns the value of attribute secrets.
  #
  # source://kamal//lib/kamal/configuration/env/tag.rb#2
  def secrets; end
end

# source://kamal//lib/kamal/configuration/logging.rb#1
class Kamal::Configuration::Logging
  include ::Kamal::Configuration::Validation
  extend ::Kamal::Configuration::Validation::ClassMethods

  # @return [Logging] a new instance of Logging
  #
  # source://kamal//lib/kamal/configuration/logging.rb#8
  def initialize(logging_config:, context: T.unsafe(nil)); end

  # source://kamal//lib/kamal/configuration/logging.rb#25
  def args; end

  # source://kamal//lib/kamal/configuration/logging.rb#2
  def argumentize(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/configuration/logging.rb#13
  def driver; end

  # Returns the value of attribute logging_config.
  #
  # source://kamal//lib/kamal/configuration/logging.rb#6
  def logging_config; end

  # source://kamal//lib/kamal/configuration/logging.rb#21
  def merge(other); end

  # source://kamal//lib/kamal/configuration/logging.rb#2
  def optionize(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/configuration/logging.rb#17
  def options; end
end

# source://kamal//lib/kamal/configuration/proxy.rb#1
class Kamal::Configuration::Proxy
  include ::Kamal::Configuration::Validation
  extend ::Kamal::Configuration::Validation::ClassMethods

  # @return [Proxy] a new instance of Proxy
  #
  # source://kamal//lib/kamal/configuration/proxy.rb#11
  def initialize(config:, proxy_config:, secrets:, role_name: T.unsafe(nil), context: T.unsafe(nil)); end

  # source://kamal//lib/kamal/configuration/proxy.rb#20
  def app_port; end

  # source://kamal//lib/kamal/configuration/proxy.rb#7
  def argumentize(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/configuration/proxy.rb#38
  def certificate_pem_content; end

  # Returns the value of attribute config.
  #
  # source://kamal//lib/kamal/configuration/proxy.rb#9
  def config; end

  # source://kamal//lib/kamal/configuration/proxy.rb#58
  def container_tls_cert; end

  # source://kamal//lib/kamal/configuration/proxy.rb#62
  def container_tls_key; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/proxy.rb#32
  def custom_ssl_certificate?; end

  # source://kamal//lib/kamal/configuration/proxy.rb#93
  def deploy_command_args(target:); end

  # source://kamal//lib/kamal/configuration/proxy.rb#66
  def deploy_options; end

  # source://kamal//lib/kamal/configuration/proxy.rb#50
  def host_tls_cert; end

  # source://kamal//lib/kamal/configuration/proxy.rb#54
  def host_tls_key; end

  # source://kamal//lib/kamal/configuration/proxy.rb#28
  def hosts; end

  # source://kamal//lib/kamal/configuration/proxy.rb#108
  def merge(other); end

  # source://kamal//lib/kamal/configuration/proxy.rb#7
  def optionize(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/configuration/proxy.rb#44
  def private_key_pem_content; end

  # Returns the value of attribute proxy_config.
  #
  # source://kamal//lib/kamal/configuration/proxy.rb#9
  def proxy_config; end

  # Returns the value of attribute role_name.
  #
  # source://kamal//lib/kamal/configuration/proxy.rb#9
  def role_name; end

  # Returns the value of attribute secrets.
  #
  # source://kamal//lib/kamal/configuration/proxy.rb#9
  def secrets; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/proxy.rb#24
  def ssl?; end

  # source://kamal//lib/kamal/configuration/proxy.rb#104
  def stop_command_args(**options); end

  # source://kamal//lib/kamal/configuration/proxy.rb#97
  def stop_options(drain_timeout: T.unsafe(nil), message: T.unsafe(nil)); end

  private

  # source://kamal//lib/kamal/configuration/proxy.rb#121
  def error_pages; end

  # source://kamal//lib/kamal/configuration/proxy.rb#117
  def seconds_duration(value); end

  # source://kamal//lib/kamal/configuration/proxy.rb#113
  def tls_path(directory, filename); end
end

# source://kamal//lib/kamal/configuration/proxy/boot.rb#1
class Kamal::Configuration::Proxy::Boot
  # @return [Boot] a new instance of Boot
  #
  # source://kamal//lib/kamal/configuration/proxy/boot.rb#10
  def initialize(config:); end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#91
  def app_container_directory; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#87
  def app_directory; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#77
  def apps_container_directory; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#73
  def apps_directory; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#81
  def apps_volume; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#8
  def argumentize(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute config.
  #
  # source://kamal//lib/kamal/configuration/proxy/boot.rb#7
  def config; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#49
  def container_name; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#30
  def default_boot_options; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#99
  def error_pages_container_directory; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#95
  def error_pages_directory; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#53
  def host_directory; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#45
  def image_default; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#61
  def image_file; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#41
  def image_name; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#65
  def image_version_file; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#26
  def logging_args(max_size); end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#8
  def optionize(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#57
  def options_file; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#14
  def publish_args(http_port, https_port, bind_ips = T.unsafe(nil)); end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#37
  def repository_name; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#69
  def run_command_file; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#107
  def tls_container_directory; end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#103
  def tls_directory; end

  private

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#112
  def ensure_valid_bind_ips(bind_ips); end

  # source://kamal//lib/kamal/configuration/proxy/boot.rb#121
  def format_bind_ip(ip); end
end

# source://kamal//lib/kamal/configuration/proxy/boot.rb#4
Kamal::Configuration::Proxy::Boot::DEFAULT_HTTPS_PORT = T.let(T.unsafe(nil), Integer)

# source://kamal//lib/kamal/configuration/proxy/boot.rb#3
Kamal::Configuration::Proxy::Boot::DEFAULT_HTTP_PORT = T.let(T.unsafe(nil), Integer)

# source://kamal//lib/kamal/configuration/proxy/boot.rb#5
Kamal::Configuration::Proxy::Boot::DEFAULT_LOG_MAX_SIZE = T.let(T.unsafe(nil), String)

# source://kamal//lib/kamal/configuration/proxy/boot.rb#2
Kamal::Configuration::Proxy::Boot::MINIMUM_VERSION = T.let(T.unsafe(nil), String)

# source://kamal//lib/kamal/configuration/proxy.rb#5
Kamal::Configuration::Proxy::CONTAINER_NAME = T.let(T.unsafe(nil), String)

# source://kamal//lib/kamal/configuration/proxy.rb#4
Kamal::Configuration::Proxy::DEFAULT_LOG_REQUEST_HEADERS = T.let(T.unsafe(nil), Array)

# source://kamal//lib/kamal/configuration/registry.rb#1
class Kamal::Configuration::Registry
  include ::Kamal::Configuration::Validation
  extend ::Kamal::Configuration::Validation::ClassMethods

  # @return [Registry] a new instance of Registry
  #
  # source://kamal//lib/kamal/configuration/registry.rb#4
  def initialize(config:, secrets:, context: T.unsafe(nil)); end

  # source://kamal//lib/kamal/configuration/registry.rb#18
  def password; end

  # source://kamal//lib/kamal/configuration/registry.rb#10
  def server; end

  # source://kamal//lib/kamal/configuration/registry.rb#14
  def username; end

  private

  # source://kamal//lib/kamal/configuration/registry.rb#25
  def lookup(key); end

  # Returns the value of attribute registry_config.
  #
  # source://kamal//lib/kamal/configuration/registry.rb#23
  def registry_config; end

  # Returns the value of attribute secrets.
  #
  # source://kamal//lib/kamal/configuration/registry.rb#23
  def secrets; end
end

# source://kamal//lib/kamal/configuration/role.rb#1
class Kamal::Configuration::Role
  include ::Kamal::Configuration::Validation
  extend ::Kamal::Configuration::Validation::ClassMethods

  # @return [Role] a new instance of Role
  #
  # source://kamal//lib/kamal/configuration/role.rb#10
  def initialize(name, config:); end

  # source://kamal//lib/kamal/configuration/role.rb#4
  def argumentize(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/configuration/role.rb#144
  def asset_extracted_directory(version = T.unsafe(nil)); end

  # source://kamal//lib/kamal/configuration/role.rb#129
  def asset_path; end

  # source://kamal//lib/kamal/configuration/role.rb#137
  def asset_volume(version = T.unsafe(nil)); end

  # source://kamal//lib/kamal/configuration/role.rb#110
  def asset_volume_args; end

  # source://kamal//lib/kamal/configuration/role.rb#148
  def asset_volume_directory(version = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/role.rb#133
  def assets?; end

  # source://kamal//lib/kamal/configuration/role.rb#42
  def cmd; end

  # Returns the value of attribute config.
  #
  # source://kamal//lib/kamal/configuration/role.rb#6
  def config; end

  # source://kamal//lib/kamal/configuration/role.rb#120
  def container_name(version = T.unsafe(nil)); end

  # source://kamal//lib/kamal/configuration/role.rb#124
  def container_prefix; end

  # source://kamal//lib/kamal/configuration/role.rb#152
  def ensure_one_host_for_ssl; end

  # source://kamal//lib/kamal/configuration/role.rb#89
  def env(host); end

  # source://kamal//lib/kamal/configuration/role.rb#94
  def env_args(host); end

  # source://kamal//lib/kamal/configuration/role.rb#98
  def env_directory; end

  # source://kamal//lib/kamal/configuration/role.rb#38
  def env_tags(host); end

  # source://kamal//lib/kamal/configuration/role.rb#34
  def hosts; end

  # source://kamal//lib/kamal/configuration/role.rb#58
  def label_args; end

  # source://kamal//lib/kamal/configuration/role.rb#54
  def labels; end

  # source://kamal//lib/kamal/configuration/role.rb#66
  def logging; end

  # source://kamal//lib/kamal/configuration/role.rb#62
  def logging_args; end

  # Returns the value of attribute name.
  #
  # source://kamal//lib/kamal/configuration/role.rb#6
  def name; end

  # source://kamal//lib/kamal/configuration/role.rb#46
  def option_args; end

  # source://kamal//lib/kamal/configuration/role.rb#4
  def optionize(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/role.rb#115
  def primary?; end

  # source://kamal//lib/kamal/configuration/role.rb#30
  def primary_host; end

  # source://kamal//lib/kamal/configuration/role.rb#70
  def proxy; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/role.rb#74
  def running_proxy?; end

  # source://kamal//lib/kamal/configuration/role.rb#102
  def secrets_io(host); end

  # source://kamal//lib/kamal/configuration/role.rb#106
  def secrets_path; end

  # Returns the value of attribute specialized_env.
  #
  # source://kamal//lib/kamal/configuration/role.rb#6
  def specialized_env; end

  # Returns the value of attribute specialized_logging.
  #
  # source://kamal//lib/kamal/configuration/role.rb#6
  def specialized_logging; end

  # Returns the value of attribute specialized_proxy.
  #
  # source://kamal//lib/kamal/configuration/role.rb#6
  def specialized_proxy; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/role.rb#78
  def ssl?; end

  # source://kamal//lib/kamal/configuration/role.rb#82
  def stop_args; end

  # Returns the value of attribute name.
  #
  # source://kamal//lib/kamal/configuration/role.rb#8
  def to_s; end

  private

  # source://kamal//lib/kamal/configuration/role.rb#216
  def custom_labels; end

  # source://kamal//lib/kamal/configuration/role.rb#204
  def default_labels; end

  # source://kamal//lib/kamal/configuration/role.rb#195
  def extract_hosts_from_config; end

  # source://kamal//lib/kamal/configuration/role.rb#159
  def initialize_specialized_proxy; end

  # source://kamal//lib/kamal/configuration/role.rb#212
  def role_config; end

  # source://kamal//lib/kamal/configuration/role.rb#208
  def specializations; end

  # source://kamal//lib/kamal/configuration/role.rb#182
  def tagged_hosts; end
end

# source://kamal//lib/kamal/configuration/servers.rb#1
class Kamal::Configuration::Servers
  include ::Kamal::Configuration::Validation
  extend ::Kamal::Configuration::Validation::ClassMethods

  # @return [Servers] a new instance of Servers
  #
  # source://kamal//lib/kamal/configuration/servers.rb#6
  def initialize(config:); end

  # Returns the value of attribute config.
  #
  # source://kamal//lib/kamal/configuration/servers.rb#4
  def config; end

  # Returns the value of attribute roles.
  #
  # source://kamal//lib/kamal/configuration/servers.rb#4
  def roles; end

  # Returns the value of attribute servers_config.
  #
  # source://kamal//lib/kamal/configuration/servers.rb#4
  def servers_config; end

  private

  # source://kamal//lib/kamal/configuration/servers.rb#15
  def role_names; end
end

# source://kamal//lib/kamal/configuration/ssh.rb#1
class Kamal::Configuration::Ssh
  include ::Kamal::Configuration::Validation
  extend ::Kamal::Configuration::Validation::ClassMethods

  # @return [Ssh] a new instance of Ssh
  #
  # source://kamal//lib/kamal/configuration/ssh.rb#8
  def initialize(config:); end

  # source://kamal//lib/kamal/configuration/ssh.rb#37
  def key_data; end

  # source://kamal//lib/kamal/configuration/ssh.rb#33
  def keys; end

  # source://kamal//lib/kamal/configuration/ssh.rb#29
  def keys_only; end

  # source://kamal//lib/kamal/configuration/ssh.rb#41
  def options; end

  # source://kamal//lib/kamal/configuration/ssh.rb#17
  def port; end

  # source://kamal//lib/kamal/configuration/ssh.rb#21
  def proxy; end

  # Returns the value of attribute ssh_config.
  #
  # source://kamal//lib/kamal/configuration/ssh.rb#6
  def ssh_config; end

  # source://kamal//lib/kamal/configuration/ssh.rb#45
  def to_h; end

  # source://kamal//lib/kamal/configuration/ssh.rb#13
  def user; end

  private

  # source://kamal//lib/kamal/configuration/ssh.rb#54
  def log_level; end

  # source://kamal//lib/kamal/configuration/ssh.rb#50
  def logger; end
end

# source://kamal//lib/kamal/configuration/ssh.rb#2
Kamal::Configuration::Ssh::LOGGER = T.let(T.unsafe(nil), Logger)

# source://kamal//lib/kamal/configuration/sshkit.rb#1
class Kamal::Configuration::Sshkit
  include ::Kamal::Configuration::Validation
  extend ::Kamal::Configuration::Validation::ClassMethods

  # @return [Sshkit] a new instance of Sshkit
  #
  # source://kamal//lib/kamal/configuration/sshkit.rb#6
  def initialize(config:); end

  # source://kamal//lib/kamal/configuration/sshkit.rb#11
  def max_concurrent_starts; end

  # source://kamal//lib/kamal/configuration/sshkit.rb#15
  def pool_idle_timeout; end

  # Returns the value of attribute sshkit_config.
  #
  # source://kamal//lib/kamal/configuration/sshkit.rb#4
  def sshkit_config; end

  # source://kamal//lib/kamal/configuration/sshkit.rb#19
  def to_h; end
end

# source://kamal//lib/kamal/configuration/validation.rb#4
module Kamal::Configuration::Validation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Kamal::Configuration::Validation::ClassMethods

  # source://kamal//lib/kamal/configuration/validation.rb#17
  def validate!(config, example: T.unsafe(nil), context: T.unsafe(nil), with: T.unsafe(nil)); end

  # source://kamal//lib/kamal/configuration/validation.rb#24
  def validation_yml; end
end

# source://kamal//lib/kamal/configuration/validation.rb#7
module Kamal::Configuration::Validation::ClassMethods
  # source://kamal//lib/kamal/configuration/validation.rb#12
  def validation_config_key; end

  # source://kamal//lib/kamal/configuration/validation.rb#8
  def validation_doc; end
end

# source://kamal//lib/kamal/configuration/validator.rb#1
class Kamal::Configuration::Validator
  # @return [Validator] a new instance of Validator
  #
  # source://kamal//lib/kamal/configuration/validator.rb#4
  def initialize(config, example:, context:); end

  # Returns the value of attribute config.
  #
  # source://kamal//lib/kamal/configuration/validator.rb#2
  def config; end

  # Returns the value of attribute context.
  #
  # source://kamal//lib/kamal/configuration/validator.rb#2
  def context; end

  # Returns the value of attribute example.
  #
  # source://kamal//lib/kamal/configuration/validator.rb#2
  def example; end

  # source://kamal//lib/kamal/configuration/validator.rb#10
  def validate!; end

  private

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/validator.rb#160
  def allow_extensions?; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/validator.rb#74
  def boolean?(type); end

  # source://kamal//lib/kamal/configuration/validator.rb#168
  def check_unknown_keys!(config, example); end

  # @raise [Kamal::ConfigurationError]
  #
  # source://kamal//lib/kamal/configuration/validator.rb#136
  def error(message); end

  # source://kamal//lib/kamal/configuration/validator.rb#148
  def error_context; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/validator.rb#164
  def extension?(key); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/validator.rb#78
  def stringish?(value); end

  # source://kamal//lib/kamal/configuration/validator.rb#64
  def type_description(type); end

  # source://kamal//lib/kamal/configuration/validator.rb#140
  def type_error(*expected_types); end

  # source://kamal//lib/kamal/configuration/validator.rb#144
  def unknown_keys_error(unknown_keys); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/validator.rb#58
  def valid_type?(value, type); end

  # source://kamal//lib/kamal/configuration/validator.rb#15
  def validate_against_example!(validation_config, example); end

  # source://kamal//lib/kamal/configuration/validator.rb#92
  def validate_array_of!(array, type); end

  # source://kamal//lib/kamal/configuration/validator.rb#82
  def validate_array_of_or_type!(value, type); end

  # source://kamal//lib/kamal/configuration/validator.rb#186
  def validate_docker_options!(options); end

  # source://kamal//lib/kamal/configuration/validator.rb#102
  def validate_hash_of!(hash, type); end

  # source://kamal//lib/kamal/configuration/validator.rb#174
  def validate_labels!(labels); end

  # source://kamal//lib/kamal/configuration/validator.rb#112
  def validate_servers!(servers); end

  # source://kamal//lib/kamal/configuration/validator.rb#132
  def validate_type!(value, *types); end

  # source://kamal//lib/kamal/configuration/validator.rb#152
  def with_context(context); end
end

# source://kamal//lib/kamal/configuration/validator/accessory.rb#1
class Kamal::Configuration::Validator::Accessory < ::Kamal::Configuration::Validator
  # source://kamal//lib/kamal/configuration/validator/accessory.rb#2
  def validate!; end
end

# source://kamal//lib/kamal/configuration/validator/alias.rb#1
class Kamal::Configuration::Validator::Alias < ::Kamal::Configuration::Validator
  # source://kamal//lib/kamal/configuration/validator/alias.rb#2
  def validate!; end
end

# source://kamal//lib/kamal/configuration/validator/builder.rb#1
class Kamal::Configuration::Validator::Builder < ::Kamal::Configuration::Validator
  # source://kamal//lib/kamal/configuration/validator/builder.rb#2
  def validate!; end
end

# source://kamal//lib/kamal/configuration/validator/configuration.rb#1
class Kamal::Configuration::Validator::Configuration < ::Kamal::Configuration::Validator
  private

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/configuration/validator/configuration.rb#3
  def allow_extensions?; end
end

# source://kamal//lib/kamal/configuration/validator/env.rb#1
class Kamal::Configuration::Validator::Env < ::Kamal::Configuration::Validator
  # source://kamal//lib/kamal/configuration/validator/env.rb#4
  def validate!; end

  private

  # source://kamal//lib/kamal/configuration/validator/env.rb#25
  def known_keys; end

  # source://kamal//lib/kamal/configuration/validator/env.rb#29
  def unknown_keys; end

  # source://kamal//lib/kamal/configuration/validator/env.rb#17
  def validate_complex_env!; end

  # source://kamal//lib/kamal/configuration/validator/env.rb#13
  def validate_simple_env!; end

  # source://kamal//lib/kamal/configuration/validator/env.rb#33
  def validate_tags!; end
end

# source://kamal//lib/kamal/configuration/validator/env.rb#2
Kamal::Configuration::Validator::Env::SPECIAL_KEYS = T.let(T.unsafe(nil), Array)

# source://kamal//lib/kamal/configuration/validator/proxy.rb#1
class Kamal::Configuration::Validator::Proxy < ::Kamal::Configuration::Validator
  # source://kamal//lib/kamal/configuration/validator/proxy.rb#2
  def validate!; end
end

# source://kamal//lib/kamal/configuration/validator/registry.rb#1
class Kamal::Configuration::Validator::Registry < ::Kamal::Configuration::Validator
  # source://kamal//lib/kamal/configuration/validator/registry.rb#4
  def validate!; end

  private

  # source://kamal//lib/kamal/configuration/validator/registry.rb#14
  def validate_string_or_one_item_array!(key); end
end

# source://kamal//lib/kamal/configuration/validator/registry.rb#2
Kamal::Configuration::Validator::Registry::STRING_OR_ONE_ITEM_ARRAY_KEYS = T.let(T.unsafe(nil), Array)

# source://kamal//lib/kamal/configuration/validator/role.rb#1
class Kamal::Configuration::Validator::Role < ::Kamal::Configuration::Validator
  # source://kamal//lib/kamal/configuration/validator/role.rb#2
  def validate!; end
end

# source://kamal//lib/kamal/configuration/validator/servers.rb#1
class Kamal::Configuration::Validator::Servers < ::Kamal::Configuration::Validator
  # source://kamal//lib/kamal/configuration/validator/servers.rb#2
  def validate!; end
end

# source://kamal//lib/kamal/configuration/volume.rb#1
class Kamal::Configuration::Volume
  # @return [Volume] a new instance of Volume
  #
  # source://kamal//lib/kamal/configuration/volume.rb#5
  def initialize(host_path:, container_path:); end

  # source://kamal//lib/kamal/configuration/volume.rb#3
  def argumentize(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute container_path.
  #
  # source://kamal//lib/kamal/configuration/volume.rb#2
  def container_path; end

  # source://kamal//lib/kamal/configuration/volume.rb#10
  def docker_args; end

  # Returns the value of attribute host_path.
  #
  # source://kamal//lib/kamal/configuration/volume.rb#2
  def host_path; end

  private

  # source://kamal//lib/kamal/configuration/volume.rb#15
  def host_path_for_docker_volume; end
end

# source://kamal//lib/kamal.rb#2
class Kamal::ConfigurationError < ::StandardError; end

# source://kamal//lib/kamal/docker.rb#4
module Kamal::Docker
  extend ::Kamal::Docker

  # source://kamal//lib/kamal/docker.rb#8
  def included_files; end
end

# source://kamal//lib/kamal/docker.rb#6
Kamal::Docker::BUILD_CHECK_TAG = T.let(T.unsafe(nil), String)

# Encode an env hash as a string where secret values have been looked up and all values escaped for Docker.
#
# source://kamal//lib/kamal/env_file.rb#2
class Kamal::EnvFile
  # @return [EnvFile] a new instance of EnvFile
  #
  # source://kamal//lib/kamal/env_file.rb#3
  def initialize(env); end

  # source://kamal//lib/kamal/env_file.rb#18
  def to_io; end

  # source://kamal//lib/kamal/env_file.rb#7
  def to_s; end

  # source://kamal//lib/kamal/env_file.rb#22
  def to_str; end

  private

  # source://kamal//lib/kamal/env_file.rb#25
  def docker_env_file_line(key, value); end

  # source://kamal//lib/kamal/env_file.rb#37
  def escape_docker_env_file_ascii_value(value); end

  # Escape a value to make it safe to dump in a docker file.
  #
  # source://kamal//lib/kamal/env_file.rb#30
  def escape_docker_env_file_value(value); end
end

# source://kamal//lib/kamal/git.rb#1
module Kamal::Git
  extend ::Kamal::Git

  # source://kamal//lib/kamal/git.rb#12
  def email; end

  # source://kamal//lib/kamal/git.rb#16
  def revision; end

  # source://kamal//lib/kamal/git.rb#24
  def root; end

  # source://kamal//lib/kamal/git.rb#20
  def uncommitted_changes; end

  # returns an array of relative path names of files with uncommitted changes
  #
  # source://kamal//lib/kamal/git.rb#29
  def uncommitted_files; end

  # returns an array of relative path names of untracked files, including gitignored files
  #
  # source://kamal//lib/kamal/git.rb#34
  def untracked_files; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/git.rb#4
  def used?; end

  # source://kamal//lib/kamal/git.rb#8
  def user_name; end
end

# source://kamal//lib/kamal/secrets.rb#3
class Kamal::Secrets
  # @return [Secrets] a new instance of Secrets
  #
  # source://kamal//lib/kamal/secrets.rb#6
  def initialize(destination: T.unsafe(nil)); end

  # source://kamal//lib/kamal/secrets.rb#11
  def [](key); end

  # source://kamal//lib/kamal/secrets.rb#28
  def secrets_files; end

  # source://kamal//lib/kamal/secrets.rb#24
  def to_h; end

  private

  # source://kamal//lib/kamal/secrets.rb#33
  def secrets; end

  # source://kamal//lib/kamal/secrets.rb#39
  def secrets_filenames; end
end

# source://kamal//lib/kamal/secrets/adapters.rb#2
module Kamal::Secrets::Adapters
  class << self
    # source://kamal//lib/kamal/secrets/adapters.rb#11
    def adapter_class(name); end

    # source://kamal//lib/kamal/secrets/adapters.rb#3
    def lookup(name); end
  end
end

# source://kamal//lib/kamal/secrets/adapters/aws_secrets_manager.rb#1
class Kamal::Secrets::Adapters::AwsSecretsManager < ::Kamal::Secrets::Adapters::Base
  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/aws_secrets_manager.rb#2
  def requires_account?; end

  private

  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/aws_secrets_manager.rb#43
  def check_dependencies!; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/aws_secrets_manager.rb#47
  def cli_installed?; end

  # source://kamal//lib/kamal/secrets/adapters/aws_secrets_manager.rb#11
  def fetch_secrets(secrets, from:, session:, account: T.unsafe(nil)); end

  # source://kamal//lib/kamal/secrets/adapters/aws_secrets_manager.rb#26
  def get_from_secrets_manager(secrets, account: T.unsafe(nil)); end

  # source://kamal//lib/kamal/secrets/adapters/aws_secrets_manager.rb#7
  def login(_account); end
end

# source://kamal//lib/kamal/secrets/adapters/base.rb#1
class Kamal::Secrets::Adapters::Base
  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/base.rb#4
  def fetch(secrets, account: T.unsafe(nil), from: T.unsafe(nil)); end

  # source://kamal//lib/kamal/secrets/adapters/base.rb#2
  def optionize(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/base.rb#13
  def requires_account?; end

  private

  # @raise [NotImplementedError]
  #
  # source://kamal//lib/kamal/secrets/adapters/base.rb#26
  def check_dependencies!; end

  # @raise [NotImplementedError]
  #
  # source://kamal//lib/kamal/secrets/adapters/base.rb#22
  def fetch_secrets(*_arg0, **_arg1, &_arg2); end

  # @raise [NotImplementedError]
  #
  # source://kamal//lib/kamal/secrets/adapters/base.rb#18
  def login(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/secrets/adapters/base.rb#30
  def prefixed_secrets(secrets, from:); end
end

# source://kamal//lib/kamal/secrets/adapters/bitwarden.rb#1
class Kamal::Secrets::Adapters::Bitwarden < ::Kamal::Secrets::Adapters::Base
  private

  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/bitwarden.rb#73
  def check_dependencies!; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/bitwarden.rb#77
  def cli_installed?; end

  # source://kamal//lib/kamal/secrets/adapters/bitwarden.rb#24
  def fetch_secrets(secrets, from:, account:, session:); end

  # source://kamal//lib/kamal/secrets/adapters/bitwarden.rb#44
  def fetch_secrets_from_fields(fields, item, item_json); end

  # source://kamal//lib/kamal/secrets/adapters/bitwarden.rb#53
  def items_fields(secrets); end

  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/bitwarden.rb#3
  def login(account); end

  # source://kamal//lib/kamal/secrets/adapters/bitwarden.rb#67
  def run_command(command, session: T.unsafe(nil), raw: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/bitwarden.rb#63
  def signedin?(account); end
end

# source://kamal//lib/kamal/secrets/adapters/bitwarden_secrets_manager.rb#1
class Kamal::Secrets::Adapters::BitwardenSecretsManager < ::Kamal::Secrets::Adapters::Base
  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/bitwarden_secrets_manager.rb#2
  def requires_account?; end

  private

  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/bitwarden_secrets_manager.rb#58
  def check_dependencies!; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/bitwarden_secrets_manager.rb#62
  def cli_installed?; end

  # source://kamal//lib/kamal/secrets/adapters/bitwarden_secrets_manager.rb#37
  def extract_command_and_project(secrets); end

  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/bitwarden_secrets_manager.rb#12
  def fetch_secrets(secrets, from:, account:, session:); end

  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/bitwarden_secrets_manager.rb#53
  def login(account); end

  # source://kamal//lib/kamal/secrets/adapters/bitwarden_secrets_manager.rb#48
  def run_command(command, session: T.unsafe(nil)); end
end

# source://kamal//lib/kamal/secrets/adapters/bitwarden_secrets_manager.rb#10
Kamal::Secrets::Adapters::BitwardenSecretsManager::GET_COMMAND = T.let(T.unsafe(nil), String)

# source://kamal//lib/kamal/secrets/adapters/bitwarden_secrets_manager.rb#8
Kamal::Secrets::Adapters::BitwardenSecretsManager::LIST_ALL_FROM_PROJECT_SUFFIX = T.let(T.unsafe(nil), String)

# source://kamal//lib/kamal/secrets/adapters/bitwarden_secrets_manager.rb#7
Kamal::Secrets::Adapters::BitwardenSecretsManager::LIST_ALL_SELECTOR = T.let(T.unsafe(nil), String)

# source://kamal//lib/kamal/secrets/adapters/bitwarden_secrets_manager.rb#9
Kamal::Secrets::Adapters::BitwardenSecretsManager::LIST_COMMAND = T.let(T.unsafe(nil), String)

# source://kamal//lib/kamal/secrets/adapters/doppler.rb#1
class Kamal::Secrets::Adapters::Doppler < ::Kamal::Secrets::Adapters::Base
  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/doppler.rb#2
  def requires_account?; end

  private

  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/doppler.rb#49
  def check_dependencies!; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/doppler.rb#53
  def cli_installed?; end

  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/doppler.rb#19
  def fetch_secrets(secrets, from:, **_arg2); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/doppler.rb#14
  def loggedin?; end

  # source://kamal//lib/kamal/secrets/adapters/doppler.rb#7
  def login(*_arg0); end

  # source://kamal//lib/kamal/secrets/adapters/doppler.rb#33
  def secrets_get_flags(secrets); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/doppler.rb#45
  def service_token_set?; end
end

# Enpass is different from most password managers, in a way that it's offline and doesn't need an account.
#
# Usage
#
# Fetch all password from FooBar item
# `kamal secrets fetch --adapter enpass --from /Users/YOUR_USERNAME/Library/Containers/in.sinew.Enpass-Desktop/Data/Documents/Vaults/primary FooBar`
#
# Fetch only DB_PASSWORD from FooBar item
# `kamal secrets fetch --adapter enpass --from /Users/YOUR_USERNAME/Library/Containers/in.sinew.Enpass-Desktop/Data/Documents/Vaults/primary FooBar/DB_PASSWORD`
#
# source://kamal//lib/kamal/secrets/adapters/enpass.rb#11
class Kamal::Secrets::Adapters::Enpass < ::Kamal::Secrets::Adapters::Base
  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/enpass.rb#12
  def requires_account?; end

  private

  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/enpass.rb#25
  def check_dependencies!; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/enpass.rb#29
  def cli_installed?; end

  # source://kamal//lib/kamal/secrets/adapters/enpass.rb#38
  def fetch_secret_titles(secrets); end

  # source://kamal//lib/kamal/secrets/adapters/enpass.rb#17
  def fetch_secrets(secrets, from:, account:, session:); end

  # source://kamal//lib/kamal/secrets/adapters/enpass.rb#34
  def login(account); end

  # source://kamal//lib/kamal/secrets/adapters/enpass.rb#51
  def parse_result_and_take_secrets(unparsed_result, secrets); end
end

# source://kamal//lib/kamal/secrets/adapters/gcp_secret_manager.rb#1
class Kamal::Secrets::Adapters::GcpSecretManager < ::Kamal::Secrets::Adapters::Base
  private

  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/gcp_secret_manager.rb#92
  def check_dependencies!; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/gcp_secret_manager.rb#96
  def cli_installed?; end

  # source://kamal//lib/kamal/secrets/adapters/gcp_secret_manager.rb#41
  def fetch_secret(project, secret_name, secret_version, user, service_account); end

  # source://kamal//lib/kamal/secrets/adapters/gcp_secret_manager.rb#29
  def fetch_secrets(secrets, from:, account:, session:); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/gcp_secret_manager.rb#109
  def is_user?(candidate); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/gcp_secret_manager.rb#101
  def logged_in?; end

  # source://kamal//lib/kamal/secrets/adapters/gcp_secret_manager.rb#3
  def login(account); end

  # source://kamal//lib/kamal/secrets/adapters/gcp_secret_manager.rb#105
  def parse_account(account); end

  # source://kamal//lib/kamal/secrets/adapters/gcp_secret_manager.rb#80
  def run_command(command, project: T.unsafe(nil), user: T.unsafe(nil), service_account: T.unsafe(nil)); end

  # The secret needs to at least contain a secret name, but project name, and secret version can also be specified.
  #
  # The string "default" can be used to refer to the default project configured for gcloud.
  #
  # The version can be either the string "latest", or a version number.
  #
  # The following formats are valid:
  #
  # - The following are all equivalent, and sets project: default, secret name: my-secret, version: latest
  #   - "my-secret"
  #   - "default/my-secret"
  #   - "default/my-secret/latest"
  #   - "my-secret/latest" in combination with --from=default
  # - "my-secret/123" (only in combination with --from=some-project) -> project: some-project, secret name: my-secret, version: 123
  # - "some-project/my-secret/123" -> project: some-project, secret name: my-secret, version: 123
  #
  # source://kamal//lib/kamal/secrets/adapters/gcp_secret_manager.rb#66
  def secrets_with_metadata(secrets); end
end

# source://kamal//lib/kamal/secrets/adapters/last_pass.rb#1
class Kamal::Secrets::Adapters::LastPass < ::Kamal::Secrets::Adapters::Base
  private

  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/last_pass.rb#32
  def check_dependencies!; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/last_pass.rb#36
  def cli_installed?; end

  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/last_pass.rb#14
  def fetch_secrets(secrets, from:, account:, session:); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/last_pass.rb#10
  def loggedin?(account); end

  # source://kamal//lib/kamal/secrets/adapters/last_pass.rb#3
  def login(account); end
end

# source://kamal//lib/kamal/secrets/adapters/one_password.rb#1
class Kamal::Secrets::Adapters::OnePassword < ::Kamal::Secrets::Adapters::Base
  # source://kamal//lib/kamal/secrets/adapters/one_password.rb#2
  def optionize(*_arg0, **_arg1, &_arg2); end

  private

  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/one_password.rb#96
  def check_dependencies!; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/one_password.rb#100
  def cli_installed?; end

  # source://kamal//lib/kamal/secrets/adapters/one_password.rb#39
  def fetch_all_secrets(from:, account:, session:); end

  # source://kamal//lib/kamal/secrets/adapters/one_password.rb#18
  def fetch_secrets(secrets, from:, account:, session:); end

  # source://kamal//lib/kamal/secrets/adapters/one_password.rb#26
  def fetch_specified_secrets(secrets, from:, account:, session:); end

  # source://kamal//lib/kamal/secrets/adapters/one_password.rb#75
  def fields_map(fields_json); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/one_password.rb#13
  def loggedin?(account); end

  # source://kamal//lib/kamal/secrets/adapters/one_password.rb#5
  def login(account); end

  # source://kamal//lib/kamal/secrets/adapters/one_password.rb#83
  def op_item_get(vault, item, account:, session:, fields: T.unsafe(nil)); end

  # source://kamal//lib/kamal/secrets/adapters/one_password.rb#51
  def to_options(**options); end

  # source://kamal//lib/kamal/secrets/adapters/one_password.rb#69
  def vault_items(from); end

  # source://kamal//lib/kamal/secrets/adapters/one_password.rb#55
  def vaults_items_fields(secrets); end
end

# source://kamal//lib/kamal/secrets/adapters/passbolt.rb#1
class Kamal::Secrets::Adapters::Passbolt < ::Kamal::Secrets::Adapters::Base
  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/passbolt.rb#2
  def requires_account?; end

  private

  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/passbolt.rb#122
  def check_dependencies!; end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/secrets/adapters/passbolt.rb#126
  def cli_installed?; end

  # @raise [ArgumentError]
  #
  # source://kamal//lib/kamal/secrets/adapters/passbolt.rb#13
  def fetch_secrets(secrets, from:, **_arg2); end

  # source://kamal//lib/kamal/secrets/adapters/passbolt.rb#112
  def get_folder_path(folder, all_folders, path = T.unsafe(nil)); end

  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/passbolt.rb#8
  def login(*_arg0); end

  # @raise [RuntimeError]
  #
  # source://kamal//lib/kamal/secrets/adapters/passbolt.rb#61
  def secrets_get_folders(secrets); end
end

# source://kamal//lib/kamal/secrets/adapters/test.rb#1
class Kamal::Secrets::Adapters::Test < ::Kamal::Secrets::Adapters::Base
  private

  # source://kamal//lib/kamal/secrets/adapters/test.rb#11
  def check_dependencies!; end

  # source://kamal//lib/kamal/secrets/adapters/test.rb#7
  def fetch_secrets(secrets, from:, account:, session:); end

  # source://kamal//lib/kamal/secrets/adapters/test.rb#3
  def login(account); end
end

# source://kamal//lib/kamal/secrets.rb#4
module Kamal::Secrets::Dotenv; end

# source://kamal//lib/kamal/secrets/dotenv/inline_command_substitution.rb#1
class Kamal::Secrets::Dotenv::InlineCommandSubstitution
  class << self
    # source://kamal//lib/kamal/secrets/dotenv/inline_command_substitution.rb#7
    def call(value, env, overwrite: T.unsafe(nil)); end

    # source://kamal//lib/kamal/secrets/dotenv/inline_command_substitution.rb#29
    def inline_secrets_command(command); end

    # source://kamal//lib/kamal/secrets/dotenv/inline_command_substitution.rb#3
    def install!; end
  end
end

# source://kamal//lib/kamal/tags.rb#3
class Kamal::Tags
  # @return [Tags] a new instance of Tags
  #
  # source://kamal//lib/kamal/tags.rb#25
  def initialize(**tags); end

  # Returns the value of attribute config.
  #
  # source://kamal//lib/kamal/tags.rb#4
  def config; end

  # source://kamal//lib/kamal/tags.rb#29
  def env; end

  # source://kamal//lib/kamal/tags.rb#37
  def except(*tags); end

  # Returns the value of attribute tags.
  #
  # source://kamal//lib/kamal/tags.rb#4
  def tags; end

  # source://kamal//lib/kamal/tags.rb#33
  def to_s; end

  class << self
    # source://kamal//lib/kamal/tags.rb#11
    def default_tags(config); end

    # source://kamal//lib/kamal/tags.rb#7
    def from_config(config, **extra); end

    # source://kamal//lib/kamal/tags.rb#20
    def service_version(config); end
  end
end

# source://kamal//lib/kamal/utils.rb#3
module Kamal::Utils
  extend ::Kamal::Utils

  # Return a list of escaped shell arguments using the same named argument against the passed attributes (hash or array).
  #
  # source://kamal//lib/kamal/utils.rb#9
  def argumentize(argument, attributes, sensitive: T.unsafe(nil)); end

  # source://kamal//lib/kamal/utils.rb#95
  def docker_arch; end

  # source://kamal//lib/kamal/utils.rb#66
  def escape_ascii_shell_value(value); end

  # Escape a value to make it safe for shell use.
  #
  # source://kamal//lib/kamal/utils.rb#60
  def escape_shell_value(value); end

  # Apply a list of host or role filters, including wildcard matches
  #
  # source://kamal//lib/kamal/utils.rb#73
  def filter_specific_items(filters, items); end

  # Flattens a one-to-many structure into an array of two-element arrays each containing a key-value pair
  #
  # source://kamal//lib/kamal/utils.rb#35
  def flatten_args(args); end

  # source://kamal//lib/kamal/utils.rb#91
  def join_commands(commands); end

  # @return [Boolean]
  #
  # source://kamal//lib/kamal/utils.rb#107
  def older_version?(version, other_version); end

  # Returns a list of shell-dashed option arguments. If the value is true, it's treated like a value-less option.
  #
  # source://kamal//lib/kamal/utils.rb#24
  def optionize(args, with: T.unsafe(nil)); end

  # source://kamal//lib/kamal/utils.rb#46
  def redacted(value); end

  # Marks sensitive values for redaction in logs and human-visible output.
  # Pass `redaction:` to change the default `"[REDACTED]"` redaction, e.g.
  # `sensitive "#{arg}=#{secret}", redaction: "#{arg}=xxxx"
  #
  # source://kamal//lib/kamal/utils.rb#42
  def sensitive(*_arg0, **_arg1, &_arg2); end

  # source://kamal//lib/kamal/utils.rb#87
  def stable_sort!(elements, &block); end
end

# source://kamal//lib/kamal/utils.rb#6
Kamal::Utils::DOLLAR_SIGN_WITHOUT_SHELL_EXPANSION_REGEX = T.let(T.unsafe(nil), Regexp)

# source://kamal//lib/kamal/utils/sensitive.rb#4
class Kamal::Utils::Sensitive
  include ::SSHKit::Redaction

  # @return [Sensitive] a new instance of Sensitive
  #
  # source://kamal//lib/kamal/utils/sensitive.rb#12
  def initialize(value, redaction: T.unsafe(nil)); end

  # Sensitive values won't leak into YAML output.
  #
  # source://kamal//lib/kamal/utils/sensitive.rb#17
  def encode_with(coder); end

  # source://kamal//lib/kamal/utils/sensitive.rb#10
  def inspect(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute redaction.
  #
  # source://kamal//lib/kamal/utils/sensitive.rb#8
  def redaction; end

  # source://kamal//lib/kamal/utils/sensitive.rb#9
  def to_s(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute unredacted.
  #
  # source://kamal//lib/kamal/utils/sensitive.rb#8
  def unredacted; end
end

# source://kamal//lib/kamal/version.rb#2
Kamal::VERSION = T.let(T.unsafe(nil), String)

# source://kamal//lib/kamal/sshkit_with_ext.rb#8
class SSHKit::Backend::Abstract
  include ::SSHKit::Backend::Abstract::CommandEnvMerge

  # source://kamal//lib/kamal/sshkit_with_ext.rb#13
  def capture_with_debug(*args, **kwargs); end

  # source://kamal//lib/kamal/sshkit_with_ext.rb#9
  def capture_with_info(*args, **kwargs); end

  # source://kamal//lib/kamal/sshkit_with_ext.rb#17
  def capture_with_pretty_json(*args, **kwargs); end

  # source://kamal//lib/kamal/sshkit_with_ext.rb#21
  def puts_by_host(host, output, type: T.unsafe(nil)); end
end

# Our execution pattern is for the CLI execute args lists returned
# from commands, but this doesn't support returning execution options
# from the command.
#
# Support this by using kwargs for CLI options and merging with the
# args-extracted options.
#
# source://kamal//lib/kamal/sshkit_with_ext.rb#31
module SSHKit::Backend::Abstract::CommandEnvMerge
  private

  # Destructure options to pluck out env for merge
  #
  # source://kamal//lib/kamal/sshkit_with_ext.rb#44
  def build_command(args, env: T.unsafe(nil), **options); end

  # Override to merge options returned by commands in the args list with
  # options passed by the CLI and pass them along as kwargs.
  #
  # source://kamal//lib/kamal/sshkit_with_ext.rb#36
  def command(args, options); end

  # source://kamal//lib/kamal/sshkit_with_ext.rb#49
  def default_command_options; end

  # source://kamal//lib/kamal/sshkit_with_ext.rb#53
  def env_for(env); end
end

# source://kamal//lib/kamal/sshkit_with_ext.rb#64
class SSHKit::Backend::Netssh < ::SSHKit::Backend::Abstract
  include ::SSHKit::Backend::Netssh::LimitConcurrentStartsInstance
  extend ::SSHKit::Backend::Netssh::LimitConcurrentStartsClass
end

# source://kamal//lib/kamal/sshkit_with_ext.rb#60
class SSHKit::Backend::Netssh::Configuration
  # Returns the value of attribute max_concurrent_starts.
  #
  # source://kamal//lib/kamal/sshkit_with_ext.rb#61
  def max_concurrent_starts; end

  # Sets the attribute max_concurrent_starts
  #
  # @param value the value to set the attribute max_concurrent_starts to.
  #
  # source://kamal//lib/kamal/sshkit_with_ext.rb#61
  def max_concurrent_starts=(_arg0); end
end

# source://kamal//lib/kamal/sshkit_with_ext.rb#65
module SSHKit::Backend::Netssh::LimitConcurrentStartsClass
  # source://kamal//lib/kamal/sshkit_with_ext.rb#68
  def configure(&block); end

  # Returns the value of attribute start_semaphore.
  #
  # source://kamal//lib/kamal/sshkit_with_ext.rb#66
  def start_semaphore; end
end

# source://kamal//lib/kamal/sshkit_with_ext.rb#81
module SSHKit::Backend::Netssh::LimitConcurrentStartsInstance
  private

  # source://kamal//lib/kamal/sshkit_with_ext.rb#94
  def start_with_concurrency_limit(*args); end

  # source://kamal//lib/kamal/sshkit_with_ext.rb#83
  def with_ssh(&block); end
end

module SSHKit::Runner; end

# source://kamal//lib/kamal/sshkit_with_ext.rb#108
class SSHKit::Runner::Parallel < ::SSHKit::Runner::Abstract
  include ::SSHKit::Runner::Parallel::CompleteAll
end

# SSHKit joins the threads in sequence and fails on the first error it encounters, which means that we wait threads
# before the first failure to complete but not for ones after.
#
# We'll patch it to wait for them all to complete, and to record all the threads that errored so we can see when a
# problem occurs on multiple hosts.
#
# source://kamal//lib/kamal/sshkit_with_ext.rb#114
module SSHKit::Runner::Parallel::CompleteAll
  # source://kamal//lib/kamal/sshkit_with_ext.rb#115
  def execute; end
end
