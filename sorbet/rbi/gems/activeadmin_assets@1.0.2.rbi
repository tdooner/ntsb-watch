# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activeadmin_assets` gem.
# Please instead update this file by running `bin/tapioca gem activeadmin_assets`.


# source://activeadmin_assets//lib/activeadmin_assets/compatibility_check.rb#1
module ActiveAdminAssets
  class << self
    # Add VERSIONs to invalidate browser caches on gem updates.
    #
    # source://activeadmin_assets//lib/activeadmin_assets/path.rb#5
    def path; end

    # source://activeadmin_assets//lib/activeadmin_assets/path.rb#9
    def path=(arg); end
  end
end

# Checks if custom/manual asset provisioning is in place.
# To be more thorough, this could also check for usage of new tailwind classes
# in any admin controllers or partials, though that might be a bit expensive.
#
# source://activeadmin_assets//lib/activeadmin_assets/compatibility_check.rb#5
module ActiveAdminAssets::CompatibilityCheck
  class << self
    # source://activeadmin_assets//lib/activeadmin_assets/compatibility_check.rb#6
    def call(app); end
  end
end

# Catches active admin asset requests and serves them from the gem.
#
# source://activeadmin_assets//lib/activeadmin_assets/middleware.rb#3
class ActiveAdminAssets::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://activeadmin_assets//lib/activeadmin_assets/middleware.rb#4
  def initialize(app, *_arg1); end

  # source://activeadmin_assets//lib/activeadmin_assets/middleware.rb#9
  def call(env); end

  # This could be made more efficient with sendfile,
  # perhaps after checking config.action_dispatch.x_sendfile_header
  #
  # source://activeadmin_assets//lib/activeadmin_assets/middleware.rb#22
  def send_data(path); end

  # source://activeadmin_assets//lib/activeadmin_assets/middleware.rb#13
  def serve(path); end
end

# source://activeadmin_assets//lib/activeadmin_assets/railtie.rb#5
class ActiveAdminAssets::Railtie < ::Rails::Railtie; end

# Modify asset URLs for active admins assets:
# - prepend special path (includes VERSIONs to bust caches on gem updates)
# - prevent sprockets or propshaft from adding digests to the asset URLs
#
# source://activeadmin_assets//lib/activeadmin_assets/url_patch.rb#5
module ActiveAdminAssets::URLPatch
  # @return [Boolean]
  #
  # source://activeadmin_assets//lib/activeadmin_assets/url_patch.rb#19
  def active_admin_asset?(path); end

  # this is called by importmap-rails, too
  #
  # source://activeadmin_assets//lib/activeadmin_assets/url_patch.rb#13
  def path_to_asset(path, *_arg1, **_arg2, &_arg3); end

  # source://activeadmin_assets//lib/activeadmin_assets/url_patch.rb#6
  def stylesheet_link_tag(path, *_arg1, **_arg2, &_arg3); end
end

# source://activeadmin_assets//lib/activeadmin_assets/version.rb#4
ActiveAdminAssets::VERSION = T.let(T.unsafe(nil), String)
